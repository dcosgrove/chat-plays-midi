{"version":3,"sources":["context/Auth.js","AuthRedirect.js","hooks/TwitchPubSubClient.js","context/TwitchEvents.js","DeviceTypes.js","hooks/MidiDevice.js","context/MidiDevices.js","DeviceList.js","effects/ArchetypeEffects.js","effects/KemperEffects.js","effects/QuadCortexEffects.js","effects/GenericDeviceEffects.js","effects/Effects.js","DeviceAddForm.js","MidiEffectList.js","TwitchEventsLog.js","TriggersList.js","TriggersAddForm.js","ConfigurationBackupForm.js","EffectAddForm.js","Browser.js","LoginGate.js","NotFound.js","LoginStatus.js","App.js","index.js"],"names":["TWITCH_APP_CLIENT_ID","AuthContext","createContext","token","clientId","updateToken","AuthProvider","children","useState","expiresAt","auth","setAuth","Provider","value","t","AuthRedirect","useContext","document","location","hash","split","replace","useEffect","Date","now","to","useTwitchPubSubClient","onChannelPointRedemption","client","setClient","connectionStatus","setConnectionStatus","console","log","authProvider","StaticAuthProvider","pubSubClient","SingleUserPubSubClient","onRedemption","message","id","userDisplayName","rewardTitle","redemptionDate","err","setInterval","_pubSubClient","isConnected","isConnecting","updateConnectedStatusLoop","TwitchEventsContext","events","registerEventListeners","listenerFn","unregisterEventListener","setEventListeners","eventListeners","TwitchEventsProvider","setEvents","length","forEach","condition","effects","type","name","exec","previous","listeners","filter","listener","DeviceTypes","useMidiDeviceList","devices","setDevices","webmidi","enable","error","outputs","MidiDeviceContext","midiOutputs","MidiDeviceProvider","DeviceList","Container","fluid","Row","Col","Table","striped","bordered","variant","map","device","alias","Button","onClick","key","HENSON_EFFECTS","CreateEffectFromParams","channel","params","effectType","cc","midiType","sendControlChange","sendProgramChange","CreateArchetypeBuiltinEffect","ArchetypeEffects","reduce","out","KEMPER_PRESETS","CreateKemperBuiltinEffect","setlistNumber","presetNumber","KemperEffects","Effects","QuadCortexEffects","effectFns","SceneLetterMap","A","B","C","D","E","F","G","H","QC_EFFECT_TYPES","setlist","preset","CreatePresetChangeEffect","scene","CreateSceneChangeEffect","CreateMidiCcEffect","midiCc","pc","CreateMidiPcEffect","midiPc","getInitializedEffectsForDevice","midiChannel","deviceType","effect","CreateQuadCortexEffectFromParams","CreateGenericEffectFromParams","effectsMap","attachEffectsToDevice","output","attachBuiltinEffectsToDevice","midiOutput","DeviceAddForm","initialState","midiDevice","formValues","setValues","validated","setValidated","displayDuplicateError","setDisplayDuplicateError","Form","noValidate","onSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","join","find","some","d","Group","className","controlId","Label","Control","required","onChange","e","target","Feedback","Text","md","FloatingLabel","label","Select","Object","entries","deviceId","deviceName","Array","i","Alert","MidiEffectList","deviceEffects","deviceAlias","findIndex","updated","l","removeEffect","TwitchEventsLog","formattedLogs","as","readOnly","style","height","formatConditionName","TriggersList","TriggersAddForm","setFormValues","placeholder","options","keys","selectedTriggers","isMulti","trigger","addTrigger","loadConfigurationFromStorage","triggers","JSON","parse","localStorage","getItem","ConfigurationBackupForm","setErrors","deserializeAndLoadConfiguration","deviceDeserializationResult","errors","deviceWithoutEffects","deserializedEffects","fromEntries","deserializeEffects","Error","deserializedTriggers","hydratedTrigger","initialLoad","setInitialLoad","configuration","setItem","stringify","saveConfigurationToStorage","eventListener","serializedEffectsList","deviceDetails","extraParams","serializedParams","GenericMidiEffectsRow","setEffectParams","effectParams","xs","QuadCortexEffectsRow","EffectAddForm","effectName","addEffect","otherDevices","updatedEffects","Browser","Tabs","defaultActiveKey","Tab","eventKey","title","LoginGate","props","loggedIn","REDIRECT_URL","window","protocol","host","pathname","Card","Body","Stack","direction","gap","href","NotFound","LoginStatus","color","Spinner","size","animation","App","Auth","TwitchEvents","Navbar","bg","expand","Brand","Nav","Item","basename","process","path","element","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.965b787e.chunk.js","sourcesContent":["import {\n  createContext, useState\n } from \"react\";\n\nconst TWITCH_APP_CLIENT_ID = 'xsdpos4tnftz6tirr730o0c3u5lfsj';\n\nexport const AuthContext = createContext({\n  token: '',\n  clientId: TWITCH_APP_CLIENT_ID,\n  updateToken: () => {}\n});\n\nexport const AuthProvider = ({ children }) => {\n    const [auth, setAuth] = useState({\n      token: '',\n      expiresAt: ''\n    });\n\n    return <AuthContext.Provider value={{ \n        token: auth.token,\n        clientId: TWITCH_APP_CLIENT_ID,\n        updateToken: (t, expiresAt) => {\n          setAuth({\n            token: t,\n            expiresAt: expiresAt\n          })\n        }\n      }}>\n      {children}\n    </AuthContext.Provider>\n}\n\nexport default AuthProvider;\n","import { useEffect, useContext } from 'react';\nimport { AuthContext } from './context/Auth';\nimport { Navigate } from 'react-router-dom';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction AuthRedirect() {\n  const {\n    updateToken\n  } = useContext(AuthContext);\n\n  const token = document.location.hash.split('&')[0].replace('#access_token=', '');\n\n  useEffect(() => {\n    // TODO - figure out expiration time\n    const expiresAt = Date.now();\n    updateToken(token, expiresAt);\n  });\n\n  return <div>\n      { token !== '' ? <Navigate replace to=\"/\" /> : `Authorizing...` }\n  </div>;\n}\n\nexport default AuthRedirect;\n","import {\n  useState,\n  useEffect\n} from 'react';\n\nimport { StaticAuthProvider } from '@twurple/auth';\nimport { SingleUserPubSubClient } from '@twurple/pubsub';\n\nconst CONNECTION_STATUS_CHECK_PERIOD = 1000; // ms\n\nconst updateConnectedStatusLoop = (client, setConnectionStatus) => {\n  setInterval(() => {\n      const  { isConnected, isConnecting } = client._pubSubClient;\n      setConnectionStatus(() => {\n        return isConnected ? 'connected' : isConnecting ? 'connecting' : 'disconnected';\n      });\n  }, CONNECTION_STATUS_CHECK_PERIOD);\n}\n\nfunction useTwitchPubSubClient(clientId, token, onChannelPointRedemption) {\n  const [ client,  setClient ] = useState(null);\n  const [ connectionStatus, setConnectionStatus ] = useState('disconnected');\n\n  useEffect(() => {\n    if(!client && token !== '') {\n      console.log('setting up Twitch pubsub client...');\n      const authProvider = new StaticAuthProvider(clientId, token);      \n      const pubSubClient = new SingleUserPubSubClient({\n        authProvider: authProvider\n      });\n\n      setConnectionStatus('connecting');\n\n      pubSubClient.onRedemption((message) => {\n        const { id, userDisplayName, rewardTitle, redemptionDate } = message;\n        onChannelPointRedemption({ id, userDisplayName, rewardTitle, redemptionDate });\n      }, (err) => {\n        throw(err);\n      });\n\n      setClient(pubSubClient);\n\n      updateConnectedStatusLoop(pubSubClient, setConnectionStatus);\n    }\n  }, [client, clientId, onChannelPointRedemption, token]);\n\n  return connectionStatus;\n}\n\nexport default useTwitchPubSubClient;\n","import {\n  createContext,\n  useContext,\n  useEffect,\n  useState\n } from \"react\";\nimport useTwitchPubSubClient from \"../hooks/TwitchPubSubClient\";\nimport { AuthContext } from \"./Auth\";\n\nexport const TwitchEventsContext = createContext({\n  events: [],\n  registerEventListeners: (listenerFn) => {},\n  unregisterEventListener: (id) => {},\n  setEventListeners: () => {},\n  eventListeners: [],\n  connectionStatus: 'disconnected'\n});\n\nexport const TwitchEventsProvider = ({ children }) => {\n  const [ events, setEvents ] = useState([]);\n\n  const {\n    clientId,\n    token\n  } = useContext(AuthContext);\n\n  const onChannelPointRedemption = ({ userDisplayName, rewardTitle, redemptionDate }) => {\n    setEvents((events) => {\n      return [\n        ...events,\n        { userDisplayName, rewardTitle, redemptionDate }\n      ]\n    });\n    }\n\n  const [ eventListeners, setEventListeners ] = useState([]);\n  \n  // run triggers for latest event\n  useEffect(() => {\n    if (events.length > 0) {\n        const { rewardTitle } = events[events.length-1];\n        eventListeners.forEach(({ condition, effects }) => {\n        if(condition.type === 'channelPoint' && condition.name === rewardTitle) {\n          effects.forEach(({ exec }) => {\n            exec();\n          });\n        }\n      });\n    }    \n  }, [ events ])\n\n  const connectionStatus = useTwitchPubSubClient(clientId, token, onChannelPointRedemption);\n\n  return <TwitchEventsContext.Provider value={{ \n      events,\n      registerEventListeners: (eventListeners) => {\n        setEventListeners((previous) => {\n          return [\n            ...previous,\n            ...eventListeners\n          ];\n        });\n      },\n      unregisterEventListener: (id) => {\n        setEventListeners((listeners) => {\n          return listeners.filter(listener => listener.id !== id);\n        });\n      },\n      setEventListeners: setEventListeners,\n      eventListeners: eventListeners,\n      connectionStatus\n  }}>\n    {children}\n  </TwitchEventsContext.Provider>\n}\n\nexport default TwitchEventsProvider;\n","const DeviceTypes = {\n  // 'kemper': 'Kemper Profiler',\n  'neural-henson': 'Neural DSP Archetype: Tim Henson',\n  // 'neural-gojira': 'Neural DSP Archetype: Gojira',\n  'quad-cortex': 'Neural DSP Quad Cortex',\n  'generic': 'Generic MIDI Device'\n}\n\nexport default DeviceTypes;\n","import { useState, useEffect } from 'react';\nimport webmidi from 'webmidi';\n\nfunction useMidiDeviceList() {\n  const [devices, setDevices] = useState([]);\n\n  useEffect(() => {\n    webmidi.enable((err) => {\n      if(err) {\n        console.error('Unable to enable WebMIDI', err);\n        setDevices([]);\n      } else {      \n        setDevices(webmidi.outputs);\n      }\n    });\n  }, []);\n\n  return devices;\n}\n\nexport default useMidiDeviceList;\n","import {\n  createContext, useState\n } from \"react\";\n\nimport useMidiDeviceList from \"../hooks/MidiDevice\";\n\nexport const MidiDeviceContext = createContext({\n  devices: [],\n  setDevices: () => {},\n  midiOutputs: []\n});\n\nexport const MidiDeviceProvider = ({ children }) => {\n    const midiOutputs = useMidiDeviceList();\n    const [ devices, setDevices ] = useState([]);\n\n    return <MidiDeviceContext.Provider value={{ \n        devices,\n        setDevices,\n        midiOutputs\n      }}>\n      {children}\n    </MidiDeviceContext.Provider>\n}\n\nexport default MidiDeviceProvider;\n","import {\n  Button,\n  Container,\n  Row,\n  Col,\n  Table\n} from 'react-bootstrap';\n\nimport { useContext } from 'react';\nimport DeviceTypes from './DeviceTypes';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nfunction DeviceList() {\n\n  const {\n    devices,\n    setDevices\n  } = useContext(MidiDeviceContext);\n\n  const removeDevice = (id) => {\n    setDevices(devices.filter(device => device.id !== id));\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Table striped bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th>Alias</th>\n                <th>ID</th>\n                <th>Type</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n            {\n              devices.map((device) => {\n                  return <tr key={device.key}>\n                    <td>{device.alias}</td>\n                    <td>{device.id}</td>\n                    <td>{DeviceTypes[device.type]}</td>\n                    <td>\n                      <Button variant=\"danger\" onClick={() => {\n                        removeDevice(device.id);\n                      }}>\n                        Remove\n                      </Button>\n                    </td>\n                  </tr>\n                }\n              )\n            }\n            </tbody>\n          </Table>\n          { devices.length === 0 ? <h2>Add a new MIDI device to get started!</h2> : null }\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default DeviceList;","// Effect name to midi CC tuples\nconst HENSON_EFFECTS = [\n  [ 'Toggle Overdrive', 1, 'control' ],\n  [ 'Toggle Distortion', 3, 'control'],\n  [ 'Toggle Phaser', 4, 'control'],\n  [ 'Toggle Chorus', 5, 'control'],\n  // 6 IS CURSED\n  [ 'Toggle Reverb', 7, 'control' ],\n  [ 'Toggle Delay', 8, 'control' ],\n  [ 'Change Patch: Clean Delay', 0, 'program' ],\n  [ 'Change Patch: Lead Shred', 1, 'program' ]\n]\n\nconst CreateArchetypeBuiltinEffect = (device, channel) => ({ cc, midiType }) => () => {\n  switch(midiType) {\n    case 'control':\n      return device.sendControlChange(cc, 1, channel);\n    case 'program':\n      return device.sendProgramChange(cc, channel);\n    default:\n      return;\n  }\n}\n\nconst CreateEffectFromParams = (device, channel) => (params) => {\n  switch (params.effectType) {\n    case 'builtin':\n      return CreateArchetypeBuiltinEffect(device, channel)(params);\n    default:\n      return;\n  }\n}\n\nconst ArchetypeEffects = (device, channel) => {\n  return HENSON_EFFECTS.reduce((out, [ name, cc, midiType ]) => {\n    const params = {\n      effectType: 'builtin',\n      name,\n      cc,\n      midiType\n    }\n\n    out[name] = {\n      params,\n      exec: CreateEffectFromParams(device, channel)(params)\n    }\n\n    return out;\n  }, {});\n}  \n\nexport default ArchetypeEffects;\n","// Kemper control codes doc: https://www.manualslib.com/manual/1786994/Kemper-Profiler.html?page=208#manual\n\n// name, cc, value, program/control\nconst KEMPER_PRESETS = [\n  ['Delay On', 27, 1, 'control'],\n  ['Delay Off', 27, 0, 'control']\n]\n\nconst CreateKemperBuiltinEffect = (device, channel) => ({ cc, value, midiType }) => () => {\n  switch(midiType) {\n    case 'control':\n      return device.sendControlChange(cc, value, channel);\n    case 'program':\n      return device.sendProgramChange(cc, channel);\n    default:\n      return;\n  }\n}\n\nexport const CreateEffectFromParams = (device, channel) => (params) => {\n  switch (params.effectType) {\n    case 'builtin':\n      return CreateKemperBuiltinEffect(device, channel)(params.setlistNumber, params.presetNumber);\n    default:\n      return;\n  }\n}\n\nconst KemperEffects = (device, channel) => {\n  return KEMPER_PRESETS.reduce((out, [ name, cc, value, midiType ]) => {\n    const params = {\n      effectType: 'builtin',\n      name: name,\n      cc,\n      value,\n      midiType\n    };\n\n    out[name] = {\n      params,\n      exec: CreateEffectFromParams(device, channel)(params)\n    }\n\n    return out;\n  }, {});\n}\n\nexport default KemperEffects;\n","// Neural docs https://cortex-support.neuraldsp.com/help/incoming-midi-reserved-cc-list\n\n\n// Effect name to midi CC tuples\nconst Effects = [\n]\n\nexport const QuadCortexEffects = (device, channel) => {\n  return Effects.reduce((effectFns, [ name, cc, type ]) => {\n      effectFns[name] = () => {\n        if (type === 'control') {\n          device.sendControlChange(cc, 1, channel);\n        } else if (type === 'program') {\n          device.sendProgramChange(cc, channel);\n        }\n      };\n\n      return effectFns;\n  }, {});\n}  \n\nexport const SceneLetterMap = {\n  A: 0,\n  B: 1,\n  C: 2,\n  D: 3,\n  E: 4,\n  F: 5,\n  G: 6,\n  H: 7\n};\n\nexport const QC_EFFECT_TYPES = [\n  'Change Preset',\n  'Change Scene'\n];\n\nexport const CreatePresetChangeEffect = (device, channel) => (setlist, preset) => () => {\n  console.log('[Debug] QC MIDI preset change: Setlist', setlist, 'Preset', preset);\n\n  // first CC for preset divvying\n  if(preset < 128) {\n    device.sendControlChange(0, 0, channel);\n  } else {\n    device.sendControlChange(0, 1, channel);\n  }\n\n  // CC32 for picking setlist\n  device.sendControlChange(32, setlist, channel);\n\n  // selected preset\n  device.sendProgramChange(preset % 128, channel);\n}\n\nexport const CreateSceneChangeEffect = (device, channel) => (scene) => () => {\n  // CC#43 - neural scene changes\n  device.sendControlChange(43, SceneLetterMap[scene], channel);\n  console.log('[Debug] QC Changing scene to: ', scene);\n}\n\nexport const CreateEffectFromParams = (device, channel) => (params) => {\n  switch (params.effectType) {\n    case 'Change Preset':\n      return CreatePresetChangeEffect(device, channel)(params.setlistNumber, params.presetNumber);\n    case 'Change Scene':\n      return CreateSceneChangeEffect(device, channel)(params.scene);\n    default:\n      return;\n  }\n}\n\nexport default QuadCortexEffects;\n","// Effect name to midi CC tuples\nconst Effects = [\n]\n\nexport const GenericDeviceEffects = (device, channel) => {\n  return Effects.reduce((effectFns, [ name, cc, type ]) => {\n      effectFns[name] = () => {\n        if (type === 'control') {\n          device.sendControlChange(cc, 1, channel);\n        } else if (type === 'program') {\n          device.sendProgramChange(cc, channel);\n        }\n      };\n\n      return effectFns;\n  }, {});\n}\n\nexport const CreateMidiCcEffect = (device, channel) => (cc) => () => {\n  device.sendControlChange(cc, 1, channel);\n}\n\nexport const CreateMidiPcEffect = (device, channel) => (pc) => () => {\n  device.sendProgramChange(pc, channel);\n}\n\nexport const CreateEffectFromParams = (device, channel) => (params) => {\n  switch (params.effectType) {\n    case 'Control Change':\n      return CreateMidiCcEffect(device, channel)(params.midiCc);\n    case 'Program Change':\n      return CreateMidiPcEffect(device, channel)(params.midiPc);\n    default:\n      return;\n  }\n}\n\nexport default CreateEffectFromParams;\n","import ArchetypeEffects from './ArchetypeEffects';\nimport KemperEffects from './KemperEffects';\nimport {\n  QuadCortexEffects,\n  CreateEffectFromParams as CreateQuadCortexEffectFromParams\n } from './QuadCortexEffects';\n\n import {\n   CreateEffectFromParams as CreateGenericEffectFromParams\n } from './GenericDeviceEffects';\n\n// attach a list of effects to a device based on its type\nconst getBuiltinEffectsForDevice = (midiOutput, midiChannel, deviceType) => {\n  if(deviceType === 'kemper') {\n    return KemperEffects(midiOutput, midiChannel);\n  } else if(deviceType === 'neural-henson') {\n    return ArchetypeEffects(midiOutput, midiChannel);\n  } else if(deviceType === 'neural-gojira') {\n    return ArchetypeEffects(midiOutput, midiChannel);\n  } else if(deviceType === 'quad-cortex') {\n    return QuadCortexEffects(midiOutput, midiChannel);\n  }else {\n    // Generic and others\n    return [];\n  }\n};\n\nconst getInitializedEffectsForDevice = (device, midiChannel, deviceType, effects) => {\n  return effects.map((effect) => {\n    if(deviceType === 'quad-cortex') {\n      return {\n        ...effect,\n        exec: CreateQuadCortexEffectFromParams(device, midiChannel)(effect.params)\n      }\n    } else if(deviceType === 'neural-henson') {\n      return {\n        ...effect,\n        exec: CreateGenericEffectFromParams(device, midiChannel)(effect.params)\n      }\n    } else if(deviceType === 'generic') {\n      return {\n        ...effect,\n        exec: CreateGenericEffectFromParams(device, midiChannel)(effect.params)\n      }\n    }else {\n      return {\n        ...effect,\n        exec: () => { console.log('Error: device not supported') }\n      }\n    }\n  }).reduce((effectsMap, effect) => {\n    effectsMap[effect.name] = {\n      params: effect.params,\n      exec: effect.exec\n    };\n    \n    return effectsMap;\n  }, {});\n};\n\nconst attachBuiltinEffectsToDevice = (device) => {\n  return {\n    ...device,\n    effects: getBuiltinEffectsForDevice(device.output, device.channel, device.type)\n  }\n};\n\nexport const attachEffectsToDevice = (device, effects) => {\n\n  return {\n    ...device,\n    effects: getInitializedEffectsForDevice(device.output, device.channel, device.type, effects)\n  }\n};\n\nexport default attachBuiltinEffectsToDevice;\n","import {\n  Alert,\n  Button,\n  Col,\n  Container,\n  FloatingLabel,\n  Row,\n  Form\n} from 'react-bootstrap';\n\nimport { useState, useContext } from 'react';\n\nimport DeviceTypes from './DeviceTypes';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nimport attachBuiltinEffectsToDevice from './effects/Effects';\n\nfunction DeviceAddForm() {\n  const initialState = {\n    alias: 'My Example Device',\n    type: '',\n    midiDevice:'',\n    midiChannel: ''\n  };\n\n  const [ formValues, setValues ] = useState(initialState);\n\n  const [ validated, setValidated ] = useState(false);\n  const [ displayDuplicateError, setDisplayDuplicateError ] = useState(false);\n\n  const {\n    devices,\n    setDevices,\n    midiOutputs\n  } = useContext(MidiDeviceContext);\n\n  const resetForm = () => {\n    setValidated(false);\n    setValues(initialState);\n  }\n\n  const addDevice = (device) => {\n    if (devices.some((d) => d.alias === device.alias)) {\n      return false;\n    } else {\n      setDevices([\n        ...devices,\n        attachBuiltinEffectsToDevice(device)\n      ]);\n      return true;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    const form = event.currentTarget;\n    \n    if (form.checkValidity()) {\n      if(addDevice({\n        key: [formValues.midiDevice, '-', formValues.midiChannel].join(''),\n        id: [formValues.midiDevice, '-', formValues.midiChannel].join(''),\n        alias: formValues.alias,\n        channel: formValues.midiChannel,\n        type: formValues.type,                    \n        output: midiOutputs.find((output) => output.id === formValues.midiDevice)\n      })) {\n        resetForm();\n        setDisplayDuplicateError(false);\n      } else {\n        setDisplayDuplicateError(true);\n      }\n\n    } else {\n      setValidated(true);\n    }\n  };\n  return (\n    <Container>\n      <Row>\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n          <Row>\n            <Form.Group className=\"mb-3\" controlId=\"formDeviceAlias\">\n              <Form.Label>Device Name</Form.Label>\n              <Form.Control\n                required\n                value={formValues.alias}\n                onChange={(e) => {\n                  setValues({\n                    ...formValues,\n                    alias: e.target.value\n                  });\n                }}\n                type=\"text\" />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a name for your device\n                </Form.Control.Feedback>\n              <Form.Text className=\"text-muted\">\n                Enter a name for the MIDI device you want to control\n              </Form.Text>\n            </Form.Group>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col md>\n              <FloatingLabel controlId=\"formDeviceType\" label=\"Device Type\">\n                <Form.Select\n                  required\n                  value={formValues.type}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      type: e.target.value\n                    });\n                  }}\n                  aria-label=\"Device Type\">\n                  <option value=\"\"></option>\n                  {\n                    Object.entries(DeviceTypes).map(([ deviceId, deviceName ]) => {\n                      return <option\n                        key={deviceId}\n                        value={deviceId}\n                        >\n                          {deviceName}\n                        </option>\n                    })\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formMidiDevice\" label=\"MIDI Device\">\n                <Form.Select\n                  required\n                  value={formValues.midiDevice}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      midiDevice: e.target.value\n                    })\n                  }}\n                  aria-label=\"MIDI Device\">\n                <option value=\"\"></option>\n                  {\n                    midiOutputs.map((device) => (\n                      <option key={device.id} value={device.id}>{device.name} ({device.id})</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formChannel\" label=\"MIDI Channel\">\n                <Form.Select\n                  required\n                  value={formValues.midiChannel}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      midiChannel: e.target.value\n                    });\n                  }}\n                  aria-label=\"MIDI Channel\">\n                  <option value=\"\"></option>\n                  {\n                    [...Array(16)].map((e, i) => (\n                      <option key={i} value={i+1}>{i+1}</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              { \n                displayDuplicateError ?\n                <Alert variant={'info'}>\n                  Device name must be unique! Choose another and try again\n                </Alert> : null\n              }\n            </Col>\n            <Col>\n              <Button\n                type=\"submit\"\n                variant=\"primary\">\n                Add Device\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Row>\n    </Container>\n  );\n}\n\nexport default DeviceAddForm;\n","import {\n  Button,\n  Container,\n  Row,\n  Col,\n  Table\n} from 'react-bootstrap';\n\nimport { useContext } from 'react';\nimport { MidiDeviceContext } from './context/MidiDevices';\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nfunction MidiEffectList() {\n  const {\n    devices,\n    setDevices\n  } = useContext(MidiDeviceContext);\n\n  const {\n    eventListeners,\n    unregisterEventListener\n  } = useContext(TwitchEventsContext);\n\n  const effects = devices.reduce((effects, device) => {\n    const deviceEffects = Object.entries(device.effects).map(([effect, { exec }]) => ({\n      key: `${device.key}-${effect}`,\n      deviceAlias: device.alias,\n      name: effect,\n      exec\n    }));\n\n    return [\n      ...effects,\n      ...deviceEffects\n    ];\n  },[]);\n\n  const removeEffect = (effect, deviceAlias) => {\n    // remove the effect from the device\n    setDevices((devices) => {\n      const i = devices.findIndex((d) => d.alias === deviceAlias);\n      const { [effect]: _, ...updated } = devices[i].effects;\n      devices[i].effects = updated;\n      return [...devices];\n    });\n\n    // remove any event listeners which used this effect\n    const removedListeners = eventListeners.filter((listener) => {\n      // if trigger's device name and effect name match\n      return listener.device.alias === deviceAlias &&\n        listener.effects.some((e) => e.name === effect);\n    });\n    \n    removedListeners.forEach(l => unregisterEventListener(l.id));\n  };\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Table striped bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th>Device</th>\n                <th>Effect</th>\n                <th>Test</th>\n                <th>Remove</th>\n              </tr>\n            </thead>\n            <tbody>\n            {\n              effects.map((effect) => {\n                  return <tr key={effect.key}>\n                    <td>{effect.deviceAlias}</td>\n                    <td>{effect.name}</td>\n                    <td>\n                      <Button \n                        onClick={() => {\n                          effect.exec();\n                        }}\n                      >\n                        Trigger\n                      </Button>\n                    </td>\n                    <td>\n                    <Button\n                        variant=\"danger\"\n                        onClick={() => {\n                          removeEffect(effect.name, effect.deviceAlias);\n                        }}\n                      >\n                        Remove\n                      </Button>\n                    </td>\n                  </tr>\n                }\n              )\n            }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default MidiEffectList;\n","import {\n  useContext\n} from 'react';\nimport {\n  Container,\n  FloatingLabel,\n  Form\n} from 'react-bootstrap';\n\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nfunction TwitchEventsLog() {\n    const {\n      events\n    } = useContext(TwitchEventsContext);\n\n    const formattedLogs = events.map(({ userDisplayName, rewardTitle, redemptionDate }) => {\n      return `[${redemptionDate}] Username: ${userDisplayName} | Channel Point Redemption: ${rewardTitle}`\n    }).join('\\n');\n    \n    return <Container>\n      <FloatingLabel controlId=\"logsTextArea\" label=\"Twitch Event Log\">\n        <Form.Control\n          as=\"textarea\"\n          readOnly\n          value={formattedLogs}\n          style={{ height: '400px' }}\n        />\n      </FloatingLabel>\n\n    </Container>\n}\n\nexport default TwitchEventsLog;\n","import {\n  useContext\n} from 'react';\n\nimport {\n  Container,\n  Row,\n  Col,\n  Table,\n  Button\n} from 'react-bootstrap';\n\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nconst formatConditionName = ({ type, name }) => {\n  switch (type) {\n    case 'channelPoint':\n      return `[Channel Points] ${name}`\n    default:\n      return 'Error'\n  }\n};\n\nfunction TriggersList() {\n    const {\n      eventListeners,\n      unregisterEventListener\n    } = useContext(TwitchEventsContext);\n\n    return (\n      <Container fluid>\n      <Row>\n        <Col>\n          <Table striped bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th>Twitch Event</th>\n                <th>Device</th>\n                <th>Effects</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n            {\n              eventListeners.map(({ id, condition, device, effects }) => {\n                  return <tr key={id}>\n                    <td>{formatConditionName(condition)}</td>\n                    <td>{device.alias}</td>\n                    <td>{effects.reduce((out, effect) => (out + ' -> ' + effect.name), '')}</td>\n                    <td>\n                      <Button variant=\"danger\" onClick={() => {\n                        unregisterEventListener(id);\n                      }}>\n                        Remove\n                      </Button>\n                    </td>\n                  </tr>\n                }\n              )\n            }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n    );\n}\n\nexport default TriggersList;\n","import {\n  Button,\n  Col,\n  Container,\n  FloatingLabel,\n  Row,\n  Form\n} from 'react-bootstrap';\n\nimport Select from 'react-select';\n\nimport { useState, useContext } from 'react';\n\nimport { MidiDeviceContext } from './context/MidiDevices';\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nfunction TriggersAddForm() {\n  const initialState = {\n    device: {\n      effects: []\n    },\n    condition: {\n      type: '',\n      name: ''\n    },\n    effects: []\n  };\n\n  const [ {\n    device,\n    condition,\n    effects\n  }, setFormValues ] = useState(initialState);\n\n  const {\n    devices\n  } = useContext(MidiDeviceContext);\n\n  const {\n    registerEventListeners\n  } = useContext(TwitchEventsContext);\n\n  const addTrigger = (formValues) => {\n    const trigger = {\n      id: `${formValues.device.alias}-${formValues.condition.type}-${formValues.condition.name}`,\n      device: formValues.device,\n      condition: formValues.condition,\n      effects: formValues.effects.map((name) => ({\n        name,\n        exec: formValues.device.effects[name].exec \n      }))\n    };\n    \n    registerEventListeners([\n      trigger\n    ]);\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Form>\n          <Row className=\"mb-3\">\n          <Col md>\n              <FloatingLabel controlId=\"formTwitchEvent\" label=\"Twitch Event Type\">\n                <Form.Select\n                  value={condition.type}\n                  onChange={(e) => {\n                    setFormValues((formValues) => {\n                      return {\n                        ...formValues,\n                        condition: {\n                          name: formValues.condition.name,\n                          type: e.target.value\n                        }\n                      }\n                    });\n                  }}\n                  aria-label=\"Device Type\">\n                  <option value=\"\"></option>\n                  <option value=\"channelPoint\">Channel Points</option>\n                  {/* <option value=\"bits\">Bits</option>\n                  <option value=\"subscriptions\">Subscriptions</option> */}\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"floatingInputGrid\" label=\"Twitch Event: Value\">\n                <Form.Control\n                  type=\"text\"\n                  value={condition.name}\n                  onChange={(e) => {\n                    setFormValues((formValues) => {\n                      return {\n                          ...formValues,\n                          condition: {\n                            type: formValues.condition.type,\n                            name: e.target.value\n                          }\n                        }\n                      });\n                    }\n                  }\n                  placeholder=\"\" />\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formDevice\" label=\"Device\">\n                <Form.Select\n                  value={device.id}\n                  onChange={(e) => {\n                    setFormValues((formValues) => {\n                      return {\n                        ...formValues,\n                        device: devices.find((d) => (d.id === e.target.value)) || { effects: [] }\n                      }\n                    })\n                  }}\n                  aria-label=\"Device\">\n                <option value=\"\"></option>\n                  {\n                    devices.map(({ alias, key, id }) => (\n                      <option key={key} value={id}>{alias}</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col className=\"mr-5 ml-5\" md>\n              <Select\n                options={Object.keys(device.effects).map(name => {\n                  return {\n                    value: name,\n                    label: name\n                  }\n                })}\n                value={effects.map((name) => ({\n                  label: name,\n                  value: name\n                }))}\n                placeholder=\"Select Effects\"\n                onChange={(selectedTriggers) => {\n                  setFormValues((formValues) => {\n                    return {\n                      ...formValues,\n                      effects: selectedTriggers.map(({ value }) => value)\n                    }\n                  });\n                }}\n                isMulti\n                />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button\n                onClick={() => {\n                  addTrigger({\n                    device,\n                    condition,\n                    effects\n                  });\n                }}\n                variant=\"primary\">\n                Add Trigger\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Row>\n    </Container>\n  );\n}\n\nexport default TriggersAddForm;\n","import {\n  useContext,\n  useEffect,\n  useState\n} from 'react';\n\nimport { \n  Button,\n  Col,\n  Container,\n  Row\n} from 'react-bootstrap';\n\nimport { MidiDeviceContext } from './context/MidiDevices';\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nimport { attachEffectsToDevice } from './effects/Effects';\n\nconst deserializeEffects = (effects) => {\n  return effects.map((effect) => {\n    const params = {\n      effectType: effect.effectType,\n      ...Object.fromEntries(effect.params)\n    };\n\n    return {\n      name: effect.name,\n      params\n    }\n  })\n};\n\nconst saveConfigurationToStorage = (name, { triggers, devices, effects }) => {\n  localStorage.setItem(`${name}-triggers`, JSON.stringify(triggers));\n  localStorage.setItem(`${name}-devices`, JSON.stringify(devices));\n  localStorage.setItem(`${name}-effects`, JSON.stringify(effects));\n};\n\nconst loadConfigurationFromStorage = (name) => {\n  const triggers = JSON.parse(localStorage.getItem(`${name}-triggers`));\n  const devices = JSON.parse(localStorage.getItem(`${name}-devices`));\n  const effects = JSON.parse(localStorage.getItem(`${name}-effects`));\n\n  if (triggers && devices && effects) {\n    return {\n      triggers,\n      devices,\n      effects\n    }\n  } else {\n    return null;\n  }\n};\n\nfunction ConfigurationBackupForm() {\n    const {\n      eventListeners,\n      setEventListeners\n    } = useContext(TwitchEventsContext);\n\n    const {\n      devices,\n      setDevices,\n      midiOutputs\n    } = useContext(MidiDeviceContext)\n\n    const [ errors, setErrors ] = useState([]);\n\n    const serializeCurrentConfiguration = () => {\n      const serializedTriggers = eventListeners.map((eventListener) => {\n        return {\n          id: eventListener.id,\n          condition: eventListener.condition,\n          device: eventListener.device.id,\n          effects: eventListener.effects.map(e => e.name)\n        };\n      });\n\n      const serializedDevices = devices.map((device) => {         \n        return {\n          id: device.id,\n          alias: device.alias,\n          channel: device.channel,\n          type: device.type,\n          midiOutput: device.output.id\n        };\n      });\n\n      const serializedEffects = devices.reduce((serializedEffectsList, device) => {\n        const deviceDetails = {\n          alias: device.alias,\n          deviceType: device.type\n        };\n\n        const effects = Object.entries(device.effects).map(([ name, { params } ]) => {\n          const {\n            effectType,\n            ...extraParams\n          } = params;\n\n          const serializedParams = Object.entries(extraParams);\n          return {\n            ...deviceDetails,\n            name,\n            effectType,\n            params: serializedParams  \n          }\n        });\n\n        return [\n          ...serializedEffectsList,\n          ...effects\n        ];\n      }, []);\n\n      return {\n        triggers: serializedTriggers,\n        devices: serializedDevices,\n        effects: serializedEffects\n      };\n    };\n  \n    const deserializeAndLoadConfiguration = ({ triggers = [], devices = [], effects = [] }) => {\n      const deviceDeserializationResult = devices.reduce(({ devices, errors }, device) => {\n        const midiOutput = midiOutputs.find(output => output.id === device.midiOutput);\n        if(midiOutput) {\n          const deviceWithoutEffects = {\n            ...device,\n            key: device.id,\n            output: midiOutput\n          };\n\n          // filter for device and deserialize\n          const deserializedEffects = deserializeEffects(effects.filter((e) => e.alias === device.alias));\n\n          return {\n            devices: [\n              ...devices,\n              attachEffectsToDevice(deviceWithoutEffects, deserializedEffects)\n            ],\n            errors: errors\n          }\n        } else {\n          return { \n            devices: devices,\n            errors: [\n              ...errors,\n              new Error(`Error loading configuration for device ${device.alias} - ID ${device.midiOutput} not found`)\n            ]\n          }\n        }\n      }, {\n        devices: [],\n        errors: []\n      });\n\n      setErrors(deviceDeserializationResult.errors);\n      setDevices(deviceDeserializationResult.devices);\n      \n      const deserializedTriggers = triggers.reduce((triggers, trigger) => {\n        const device = deviceDeserializationResult.devices.find((d) => d.id === trigger.device);\n\n        if(device) {\n          const hydratedTrigger = {\n            ...trigger,\n            device: device,\n            effects: trigger.effects.map((name) => {\n              return {\n                name: name,\n                exec: device.effects[name].exec\n              } \n            })\n          }\n\n          return [\n            ...triggers,\n            hydratedTrigger\n          ]\n        } else {\n          return triggers;\n        }\n      }, []);\n\n      setEventListeners(deserializedTriggers);\n\n      return deviceDeserializationResult.errors;\n    };\n\n    const [ initialLoad, setInitialLoad ] = useState(true);\n\n    useEffect(() => {\n      if(initialLoad) {\n        const configuration = loadConfigurationFromStorage('current');\n        if (configuration) {\n          const errors = deserializeAndLoadConfiguration(configuration);\n          if (errors.length === 0) {\n            setInitialLoad(false);\n          }\n        } else {\n          setInitialLoad(false);\n        }\n      }\n    }, [ midiOutputs, initialLoad, setInitialLoad, deserializeAndLoadConfiguration ]);\n\n    return <Container>\n      <Row className=\"mb-2\">\n        <Col>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              const configuration = serializeCurrentConfiguration();\n              saveConfigurationToStorage('current', configuration);\n            }}\n            >\n          Save Current Configuration\n          </Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              const configuration = loadConfigurationFromStorage('current');\n              if (configuration) {\n                deserializeAndLoadConfiguration(configuration);\n              }\n            }}\n            >\n          Restore Last Saved Configuration\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n}\n\nexport default ConfigurationBackupForm;\n","import {\n  Alert,\n  Button,\n  Col,\n  Container,\n  FloatingLabel,\n  Row,\n  Form\n} from 'react-bootstrap';\n\nimport { useState, useContext } from 'react';\n\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nimport {\n  QC_EFFECT_TYPES,\n  CreateEffectFromParams as CreateQuadCortexEffectFromParams,\n  SceneLetterMap\n} from './effects/QuadCortexEffects';\n\nimport {\n  CreateEffectFromParams as CreateGenericEffectFromParams\n} from './effects/GenericDeviceEffects';\n\nfunction GenericMidiEffectsRow({\n  setEffectParams,\n  effectParams\n}) {\n  const {\n    effectType = '',\n    midiCc = '',\n    midiPc = ''\n  } = effectParams;\n\n  return <>\n    <Row className=\"mb-3\">\n    <Col md>\n      <FloatingLabel controlId=\"formMidiEffectType\" label=\"Effect Type\">\n        <Form.Select\n          required\n          value={effectType}\n          onChange={(e) => {\n            // if we are changing to a new type, clear existing params\n            if(e.target.value !== effectType) {\n              setEffectParams({\n                  effectType: e.target.value\n              })\n            }\n          }}\n          aria-label=\"Effect Type\">\n          <option value=\"\"></option>\n          <option key=\"Control Change\" value=\"Control Change\">Control Change</option>\n          <option key=\"Program Change\" value=\"Program Change\">Program Change</option>            \n        </Form.Select>\n      </FloatingLabel>\n    </Col>\n    { effectType === 'Control Change' ? \n      <>\n        <Col xs>\n          <FloatingLabel controlId=\"floatingCcNumber\" label=\"CC #\">\n            <Form.Control\n              required\n              type=\"text\"\n              value={midiCc}\n              onChange={(e) => {\n                setEffectParams({\n                      ...effectParams,\n                      midiCc: e.target.value\n                  });\n                }\n              }\n              />\n          </FloatingLabel>\n        </Col>\n        <Col xs></Col>\n      </> : effectType === 'Program Change' ?\n      <>\n      <Col xs>\n        <FloatingLabel controlId=\"floatingPcNumber\" label=\"PC #\">\n          <Form.Control\n            required\n            type=\"text\"\n            value={midiPc}\n            onChange={(e) => {\n              setEffectParams({\n                    ...effectParams,\n                    midiPc: e.target.value\n                });\n              }\n            }\n            />\n        </FloatingLabel>\n      </Col>\n      <Col xs></Col>\n    </> : \n      <> \n        <Col xs></Col>\n        <Col xs></Col> \n      </>\n    }\n  </Row>\n  </>\n};\n\nfunction QuadCortexEffectsRow({\n  setEffectParams,\n  effectParams\n}) {\n\n  const {\n    effectType = '',\n    presetNumber = '',\n    setlistNumber = '',\n    scene = ''\n  } = effectParams;\n\n  return <>\n    <Row className=\"mb-3\">\n    <Col md>\n      <FloatingLabel controlId=\"formQCEffectType\" label=\"Effect Type\">\n        <Form.Select\n          required\n          value={effectType}\n          onChange={(e) => {\n            // if we are changing to a new type, clear existing params\n            if(e.target.value !== effectType) {\n              setEffectParams({\n                  effectType: e.target.value\n              })\n            }\n          }}\n          aria-label=\"Effect Type\">\n        <option value=\"\"></option>\n          {\n            QC_EFFECT_TYPES.map((effectType) => (\n              <option key={effectType} value={effectType}>{effectType}</option>\n            ))\n          }\n        </Form.Select>\n      </FloatingLabel>\n    </Col>\n    { effectType === 'Change Preset' ? \n      <>\n        <Col xs>\n          <FloatingLabel controlId=\"floatingSetlistNumber\" label=\"Setlist #\">\n            <Form.Control\n              required\n              type=\"text\"\n              value={setlistNumber}\n              onChange={(e) => {\n                setEffectParams({\n                      ...effectParams,\n                      setlistNumber: e.target.value\n                  });\n                }\n              }\n              />\n          </FloatingLabel>\n        </Col>\n        <Col xs>\n          <FloatingLabel controlId=\"floatingPresetNumber\" label=\"Preset #\">\n            <Form.Control\n              required\n              type=\"text\"\n              value={presetNumber}\n              onChange={(e) => {\n                setEffectParams({\n                      ...effectParams,\n                      presetNumber: e.target.value\n                  });\n                }\n              }\n              />\n          </FloatingLabel>\n        </Col>\n      </> : effectType === 'Change Scene' ?\n      <>\n        <Col xs>\n          <FloatingLabel controlId=\"floatingSceneLetter\" label=\"Scene\">\n            <Form.Select\n              required\n              value={scene}\n              onChange={(e) => {\n                setEffectParams({\n                    ...effectParams,\n                    scene: e.target.value\n                });\n              }}\n              aria-label=\"Scene\">\n            <option value=\"\"></option>\n              {\n               Object.keys(SceneLetterMap).map((scene) => (\n                  <option key={scene} value={scene}>{scene}</option>\n                ))\n              }\n            </Form.Select>\n          </FloatingLabel>\n        </Col>\n        <Col xs></Col>\n      </> : \n      <> \n        <Col xs></Col>\n        <Col xs></Col> \n      </>\n    }\n  </Row>\n  </>\n}\n\nfunction EffectAddForm() {\n  const initialState = {\n    device: {\n      id: '',\n      effects: []\n    },\n    effectName: '',\n    setlistNumber: '',\n    presetNumber: ''\n  };\n\n  const [ { device, effectName, effectParams = {} }, setFormValues ] = useState(initialState);\n\n  const [ validated, setValidated ] = useState(false);\n  const [ displayDuplicateError, setDisplayDuplicateError ] = useState(false);\n\n  const resetForm = () => {\n    setValidated(false);\n    setDisplayDuplicateError(false);\n    setFormValues(initialState);\n  }  \n\n  const {\n    devices,\n    setDevices\n  } = useContext(MidiDeviceContext);\n\n  const addEffect = () => {\n    // replace device with updated preset list\n    const otherDevices = devices.filter((d) => d.id !== device.id);\n\n    // effect name conflict - error!\n    if(device.effects[effectName]) {\n      setDisplayDuplicateError(true);\n      return;\n    }\n\n    const updatedEffects = device.effects;\n    if(device.type === 'quad-cortex') {\n      updatedEffects[effectName] = {\n        params: effectParams,\n        exec: CreateQuadCortexEffectFromParams(device.output, device.channel)(effectParams)\n      };\n    } else if(device.type === 'neural-henson' || device.type === 'generic') {\n      updatedEffects[effectName] = {\n        params: effectParams,\n        exec: CreateGenericEffectFromParams(device.output, device.channel)(effectParams)\n      }\n    }\n    \n    setDevices([\n      ...otherDevices,\n      {\n        ...device,\n        effects: updatedEffects\n      }\n    ]);\n\n    resetForm();\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    const form = event.currentTarget;\n    \n    if (form.checkValidity()) {\n      addEffect();\n    } else {\n      setValidated(true);\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n          <Row className=\"mb-3\">\n            <Col xs={6}>\n              <FloatingLabel controlId=\"floatingEffectName\" label=\"Effect Name\">\n                <Form.Control\n                  type=\"text\"\n                  required\n                  value={effectName}\n                  onChange={(e) => {\n                    setFormValues((formValues) => {\n                      return {\n                          ...formValues,\n                          effectName: e.target.value\n                        }\n                      });\n                    }\n                  }\n                  />\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formDevice\" label=\"Device\">\n                <Form.Select\n                  required\n                  value={device.id}\n                  onChange={(e) => {\n                    setFormValues((formValues) => {\n                      return {\n                        ...formValues,\n                        device: devices.find((d) => (d.id === e.target.value)) || { effects: [] }\n                      }\n                    })\n                  }}\n                  aria-label=\"Device\">\n                <option value=\"\"></option>\n                  {\n                    devices.map(({ alias, key, id }) => (\n                      <option key={key} value={id}>{alias}</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n          </Row>\n          {\n            device.type === 'quad-cortex' ?\n              <QuadCortexEffectsRow\n                setEffectParams={(effectParams) => {\n                  setFormValues((formValues) => {\n                    return {\n                      ...formValues,\n                      effectParams\n                    }  \n                  })\n                }}\n                effectParams={effectParams}\n              /> : device.type === 'neural-henson' || device.type === 'generic' ?\n              <GenericMidiEffectsRow\n                setEffectParams={(effectParams) => {\n                  setFormValues((formValues) => {\n                    return {\n                      ...formValues,\n                      effectParams\n                    }  \n                  })\n                }}\n                effectParams={effectParams}\n              /> : null\n          }\n          <Row>\n            <Col>\n              { \n                displayDuplicateError ?\n                <Alert variant={'info'}>\n                  Unable to add effect: name must be unique per device!\n                </Alert> : null\n              }\n            </Col>\n            <Col>\n              <Button\n                type=\"submit\"\n                variant=\"primary\">\n                Add Effect\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Row>\n    </Container>\n  );\n}\n\nexport default EffectAddForm;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport DeviceList from './DeviceList';\nimport DeviceAddForm from './DeviceAddForm';\nimport MidiEffectList from './MidiEffectList';\nimport TwitchEventsLog from './TwitchEventsLog';\nimport MidiDeviceProvider from './context/MidiDevices';\nimport TriggersList from './TriggersList';\nimport TriggersAddForm from './TriggersAddForm';\nimport ConfigurationBackupForm from './ConfigurationBackupForm';\nimport EffectAddForm from './EffectAddForm';\n\nfunction Browser() {\n  return (\n    <MidiDeviceProvider>\n      <Tabs defaultActiveKey=\"browser\" id=\"browser\" className=\"mb-3\">\n        <Tab eventKey=\"triggers\" title=\"Triggers\">\n          <TriggersList />\n          <TriggersAddForm />\n        </Tab>\n        <Tab eventKey=\"previewEffects\" title=\"Effects\">\n          <MidiEffectList />\n          <EffectAddForm />\n        </Tab>\n        <Tab eventKey=\"midiDevices\" title=\"Manage MIDI Devices\">\n          <DeviceList />\n          <DeviceAddForm />\n        </Tab>\n        <Tab eventKey=\"saveConfiguration\" title=\"Save/Load Configuration\">\n          <ConfigurationBackupForm />\n        </Tab>\n        <Tab eventKey=\"eventLog\" title=\"Twitch Event Log\">\n          <TwitchEventsLog />\n        </Tab>\n      </Tabs>\n    </MidiDeviceProvider>\n  );\n}\n\nexport default Browser;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Button,\n  Card,\n  Container,\n  Stack\n} from 'react-bootstrap';\nimport {\n  useContext\n} from 'react';\n\nimport { AuthContext } from './context/Auth';\n\nfunction LoginGate(props) {\n    const {\n      clientId,\n      token\n    } = useContext(AuthContext);\n    \n    const loggedIn = token !== '';\n    \n    const REDIRECT_URL = `${window.location.protocol}//${window.location.host}${window.location.pathname}authorize`\n\n    return loggedIn ? props.children : \n      <Card className=\"mt-3\">\n        <Card.Body>\n          <Stack direction=\"horizontal\" gap={2}>\n            <div>Connect your Twitch.TV account in order to get started:</div>\n            <Button onClick={() => {\n              window.location.href = `https://id.twitch.tv/oauth2/authorize?client_id=${clientId}&redirect_uri=${REDIRECT_URL}&response_type=token&scope=bits%3Aread%20channel%3Aread%3Aredemptions%20channel%3Aread%3Asubscriptions`;\n            }}>\n              Twitch.TV Login\n            </Button>\n            </Stack>\n        </Card.Body>\n      </Card>\n}\n\nexport default LoginGate;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction NotFound() {\n  return <h2>\n    Invalid URL - page not found\n  </h2>;\n}\n\nexport default NotFound;","import {\n  useContext\n} from 'react';\nimport {\n  CloudCheck,\n  CloudSlash\n} from 'react-bootstrap-icons';\n\nimport { Alert, Spinner } from 'react-bootstrap';\n\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nfunction LoginStatus() {\n    const {\n      connectionStatus\n    } = useContext(TwitchEventsContext);    \n\n    switch (connectionStatus) {\n      case 'connected':\n        return <Alert variant=\"success\" className=\"mb-0\"> <CloudCheck color=\"green\" /> Connected to Twitch</Alert>\n      case 'connecting':\n        return <Alert variant=\"primary\" className=\"mb-0\"> <Spinner size=\"sm\" animation=\"border\" /> Connecting...</Alert>\n      case 'disconnected':\n        return <Alert variant=\"danger\" className=\"mb-0\"><CloudSlash color=\"red\" /> Disconnected from Twitch!</Alert>\n      default:\n        return <Alert variant=\"warning\">Error checking connection status</Alert>\n    }\n}\n\nexport default LoginStatus;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AuthRedirect from './AuthRedirect';\nimport AuthProvider from './context/Auth';\nimport TwitchEventsProvider from './context/TwitchEvents';\nimport Browser from './Browser';\nimport LoginGate from './LoginGate';\nimport NotFound from './NotFound';\nimport {\n  Container,\n  Navbar,\n  Nav\n} from 'react-bootstrap';\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from 'react-router-dom';\nimport LoginStatus from './LoginStatus';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <TwitchEventsProvider>\n        <div className=\"App\"> \n          <Navbar variant=\"dark\" bg=\"dark\" expand=\"sm\" className=\"mb-3\">\n            <Container>\n              <Navbar.Brand>Chat Plays MIDI</Navbar.Brand>\n              <Nav className=\"me-auto\">\n                {/* <Nav.Link href=\"#setup\">Setup Guide</Nav.Link>\n                <Nav.Link href=\"#contact\">Contact</Nav.Link> */}\n              </Nav>\n              <Nav.Item>\n                <Container>\n                  <LoginStatus /> \n                </Container>\n              </Nav.Item>\n            </Container>\n          </Navbar>\n          \n          {/* ----- MAIN CONTENT ---- */}\n          <Container>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n              <Routes>\n                <Route path=\"/\" element={\n                  <Container>\n                    <LoginGate>\n                      <Browser>\n                      </Browser>\n                    </LoginGate>\n                  </Container>\n                } />\n              <Route path=\"/authorize\" element={\n                <AuthRedirect />\n              } />\n              <Route path=\"/*\" element={\n                <NotFound />\n              } />\n              </Routes>\n            </BrowserRouter>\n          </Container>\n        </div>\n      </TwitchEventsProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}