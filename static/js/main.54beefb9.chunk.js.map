{"version":3,"sources":["context/Auth.js","AuthRedirect.js","hooks/TwitchPubSubClient.js","context/TwitchEvents.js","DeviceTypes.js","hooks/MidiDevice.js","context/MidiDevices.js","DeviceList.js","effects/ArchetypeEffects.js","effects/KemperEffects.js","effects/Effects.js","DeviceAddForm.js","MidiEffectList.js","TwitchEventsLog.js","TriggersList.js","TriggersAddForm.js","ConfigurationBackupForm.js","Browser.js","LoginGate.js","NotFound.js","LoginStatus.js","App.js","index.js"],"names":["TWITCH_APP_CLIENT_ID","AuthContext","createContext","token","clientId","updateToken","AuthProvider","children","useState","expiresAt","auth","setAuth","Provider","value","t","AuthRedirect","useContext","document","location","hash","split","replace","useEffect","Date","now","console","group","to","useTwitchPubSubClient","onChannelPointRedemption","client","setClient","connectionStatus","setConnectionStatus","log","authProvider","StaticAuthProvider","pubSubClient","SingleUserPubSubClient","onRedemption","message","id","userDisplayName","rewardTitle","redemptionDate","err","setInterval","_pubSubClient","isConnected","isConnecting","updateConnectedStatusLoop","TwitchEventsContext","events","registerEventListeners","listenerFn","unregisterEventListener","setEventListeners","eventListeners","TwitchEventsProvider","setEvents","length","forEach","condition","effects","type","name","exec","previous","listeners","filter","listener","DeviceTypes","useMidiDeviceList","devices","setDevices","webmidi","enable","error","outputs","MidiDeviceContext","midiOutputs","MidiDeviceProvider","DeviceList","Container","fluid","Row","Col","Table","striped","bordered","variant","map","device","alias","Button","onClick","key","Effects","ArchetypeEffects","channel","reduce","effectFns","cc","sendControlChange","sendProgramChange","KemperEffects","attachEffectsToDevice","midiOutput","output","midiChannel","deviceType","DeviceAddForm","midiDevice","formValues","setValues","Form","Group","className","controlId","Label","Control","onChange","e","target","Text","md","FloatingLabel","label","Select","Object","entries","deviceId","deviceName","Array","i","join","find","some","d","MidiEffectList","deviceEffects","effect","trigger","deviceAlias","TwitchEventsLog","formattedLogs","as","readOnly","style","height","formatConditionName","TriggersList","out","TriggersAddForm","setFormValues","placeholder","keys","addTrigger","loadConfigurationFromStorage","triggers","JSON","parse","localStorage","getItem","ConfigurationBackupForm","setErrors","deserializeAndLoadConfiguration","deviceDeserializationResult","errors","deviceWithoutEffects","Error","deserializedTriggers","hydratedTrigger","initialLoad","setInitialLoad","configuration","setItem","stringify","saveConfigurationToStorage","eventListener","Browser","Tabs","defaultActiveKey","Tab","eventKey","title","LoginGate","props","loggedIn","REDIRECT_URL","window","protocol","host","pathname","Card","Body","Stack","direction","gap","href","NotFound","LoginStatus","Alert","color","Spinner","size","animation","App","Auth","TwitchEvents","Navbar","bg","expand","Brand","Nav","Item","basename","process","path","element","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.54beefb9.chunk.js","sourcesContent":["import {\n  createContext, useState\n } from \"react\";\n\nconst TWITCH_APP_CLIENT_ID = 'xsdpos4tnftz6tirr730o0c3u5lfsj';\n\nexport const AuthContext = createContext({\n  token: '',\n  clientId: TWITCH_APP_CLIENT_ID,\n  updateToken: () => {}\n});\n\nexport const AuthProvider = ({ children }) => {\n    const [auth, setAuth] = useState({\n      token: '',\n      expiresAt: ''\n    });\n\n    return <AuthContext.Provider value={{ \n        token: auth.token,\n        clientId: TWITCH_APP_CLIENT_ID,\n        updateToken: (t, expiresAt) => {\n          setAuth({\n            token: t,\n            expiresAt: expiresAt\n          })\n        }\n      }}>\n      {children}\n    </AuthContext.Provider>\n}\n\nexport default AuthProvider;\n","import { useEffect, useContext } from 'react';\nimport { AuthContext } from './context/Auth';\nimport { Navigate } from 'react-router-dom';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction AuthRedirect() {\n  const {\n    updateToken\n  } = useContext(AuthContext);\n\n  const token = document.location.hash.split('&')[0].replace('#access_token=', '');\n\n  useEffect(() => {\n    // TODO - figure out expiration time\n    const expiresAt = Date.now();\n    console.group('updating with', token, expiresAt);\n    updateToken(token, expiresAt);\n    \n  });\n\n  return <div>\n      { token !== '' ? <Navigate replace to=\"/\" /> : `Authorizing...` }\n  </div>;\n}\n\nexport default AuthRedirect;\n","import {\n  useState,\n  useEffect\n} from 'react';\n\nimport { StaticAuthProvider } from '@twurple/auth';\nimport { SingleUserPubSubClient } from '@twurple/pubsub';\n\nconst CONNECTION_STATUS_CHECK_PERIOD = 1000; // ms\n\nconst updateConnectedStatusLoop = (client, setConnectionStatus) => {\n  setInterval(() => {\n      const  { isConnected, isConnecting } = client._pubSubClient;\n      setConnectionStatus(() => {\n        return isConnected ? 'connected' : isConnecting ? 'connecting' : 'disconnected';\n      });\n  }, CONNECTION_STATUS_CHECK_PERIOD);\n}\n\nfunction useTwitchPubSubClient(clientId, token, onChannelPointRedemption) {\n  const [ client,  setClient ] = useState(null);\n  const [ connectionStatus, setConnectionStatus ] = useState('disconnected');\n\n  useEffect(() => {\n    if(!client && token !== '') {\n      console.log('setting up Twitch pubsub client...');\n      const authProvider = new StaticAuthProvider(clientId, token);      \n      const pubSubClient = new SingleUserPubSubClient({\n        authProvider: authProvider\n      });\n\n      setConnectionStatus('connecting');\n\n      pubSubClient.onRedemption((message) => {\n        const { id, userDisplayName, rewardTitle, redemptionDate } = message;\n        onChannelPointRedemption({ id, userDisplayName, rewardTitle, redemptionDate });\n      }, (err) => {\n        throw(err);\n      });\n\n      setClient(pubSubClient);\n\n      updateConnectedStatusLoop(pubSubClient, setConnectionStatus);\n    }\n  }, [client, clientId, onChannelPointRedemption, token]);\n\n  return connectionStatus;\n}\n\nexport default useTwitchPubSubClient;\n","import {\n  createContext,\n  useContext,\n  useEffect,\n  useState\n } from \"react\";\nimport useTwitchPubSubClient from \"../hooks/TwitchPubSubClient\";\nimport { AuthContext } from \"./Auth\";\n\nexport const TwitchEventsContext = createContext({\n  events: [],\n  registerEventListeners: (listenerFn) => {},\n  unregisterEventListener: (id) => {},\n  setEventListeners: () => {},\n  eventListeners: [],\n  connectionStatus: 'disconnected'\n});\n\nexport const TwitchEventsProvider = ({ children }) => {\n  const [ events, setEvents ] = useState([]);\n\n  const {\n    clientId,\n    token\n  } = useContext(AuthContext);\n\n  const onChannelPointRedemption = ({ userDisplayName, rewardTitle, redemptionDate }) => {\n    setEvents((events) => {\n      return [\n        ...events,\n        { userDisplayName, rewardTitle, redemptionDate }\n      ]\n    });\n    }\n\n  const [ eventListeners, setEventListeners ] = useState([]);\n  \n  // run triggers for latest event\n  useEffect(() => {\n    if (events.length > 0) {\n        const { rewardTitle } = events[events.length-1];\n        eventListeners.forEach(({ condition, effects }) => {\n        if(condition.type === 'channelPoint' && condition.name === rewardTitle) {\n          effects.forEach(({ exec }) => exec());\n        }\n      });\n    }    \n  }, [ events ])\n\n  const connectionStatus = useTwitchPubSubClient(clientId, token, onChannelPointRedemption);\n\n  return <TwitchEventsContext.Provider value={{ \n      events,\n      registerEventListeners: (eventListeners) => {\n        setEventListeners((previous) => {\n          return [\n            ...previous,\n            ...eventListeners\n          ];\n        });\n      },\n      unregisterEventListener: (id) => {\n        setEventListeners((listeners) => {\n          return listeners.filter(listener => listener.id !== id);\n        });\n      },\n      setEventListeners: setEventListeners,\n      eventListeners: eventListeners,\n      connectionStatus\n  }}>\n    {children}\n  </TwitchEventsContext.Provider>\n}\n\nexport default TwitchEventsProvider;\n","const DeviceTypes = {\n  'kemper': 'Kemper Profiler',\n  'neural-henson': 'Neural DSP Archetype: Tim Henson',\n  'neural-gojira': 'Neural DSP Archetype: Gojira'\n}\n\nexport default DeviceTypes;\n","import { useState, useEffect } from 'react';\nimport webmidi from 'webmidi';\n\nfunction useMidiDeviceList() {\n  const [devices, setDevices] = useState([]);\n\n  useEffect(() => {\n    webmidi.enable((err) => {\n      if(err) {\n        console.error('Unable to enable WebMIDI', err);\n        setDevices([]);\n      } else {      \n        setDevices(webmidi.outputs);\n      }\n    });\n  }, []);\n\n  return devices;\n}\n\nexport default useMidiDeviceList;\n","import {\n  createContext, useState\n } from \"react\";\n\nimport useMidiDeviceList from \"../hooks/MidiDevice\";\n\nexport const MidiDeviceContext = createContext({\n  devices: [],\n  setDevices: () => {},\n  midiOutputs: []\n});\n\nexport const MidiDeviceProvider = ({ children }) => {\n    const midiOutputs = useMidiDeviceList();\n    const [ devices, setDevices ] = useState([]);\n\n    return <MidiDeviceContext.Provider value={{ \n        devices,\n        setDevices,\n        midiOutputs\n      }}>\n      {children}\n    </MidiDeviceContext.Provider>\n}\n\nexport default MidiDeviceProvider;\n","import {\n  Button,\n  Container,\n  Row,\n  Col,\n  Table\n} from 'react-bootstrap';\n\nimport { useContext } from 'react';\nimport DeviceTypes from './DeviceTypes';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nfunction DeviceList() {\n\n  const {\n    devices,\n    setDevices\n  } = useContext(MidiDeviceContext);\n\n  const removeDevice = (id) => {\n    setDevices(devices.filter(device => device.id !== id));\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Table striped bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th>Alias</th>\n                <th>ID</th>\n                <th>Type</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n            {\n              devices.map((device) => {\n                  return <tr key={device.key}>\n                    <td>{device.alias}</td>\n                    <td>{device.id}</td>\n                    <td>{DeviceTypes[device.type]}</td>\n                    <td>\n                      <Button variant=\"danger\" onClick={() => {\n                        removeDevice(device.id);\n                      }}>\n                        Remove\n                      </Button>\n                    </td>\n                  </tr>\n                }\n              )\n            }\n            </tbody>\n          </Table>\n          { devices.length === 0 ? <h2>Add a new MIDI device to get started!</h2> : null }\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default DeviceList;","// Effect name to midi CC tuples\nconst Effects = [\n  [ 'Toggle Overdrive', 1, 'control' ],\n  [ 'Toggle Distortion', 3, 'control'],\n  [ 'Toggle Phaser', 4, 'control'],\n  [ 'Toggle Chorus', 5, 'control'],\n  // 6 IS CURSED\n  [ 'Toggle Reverb', 7, 'control' ],\n  [ 'Toggle Delay', 8, 'control' ],\n  [ 'Change Patch: Clean Delay', 0, 'program' ],\n  [ 'Change Patch: Lead Shred', 1, 'program' ]\n]\n\nconst ArchetypeEffects = (device, channel) => {\n  return Effects.reduce((effectFns, [ name, cc, type ]) => {\n      effectFns[name] = () => {\n        if (type === 'control') {\n          device.sendControlChange(cc, 1, channel);\n        } else if (type === 'program') {\n          device.sendProgramChange(cc, channel);\n        }\n      };\n\n      return effectFns;\n  }, {});\n}  \n\nexport default ArchetypeEffects;\n","// Kemper control codes doc: https://www.manualslib.com/manual/1786994/Kemper-Profiler.html?page=208#manual\n\nconst KemperEffects = (device, channel) => {\n  return {\n    'Delay On': () => {\n      device.sendControlChange(27, 1, channel);\n    },\n    'Delay Off': () => {\n      device.sendControlChange(27, 0, channel);\n    }\n  }\n}\n\nexport default KemperEffects;\n","import ArchetypeEffects from './ArchetypeEffects';\nimport KemperEffects from './KemperEffects';\n\n// attach a list of effects to a device based on its type\nconst getEffectsForDevice = (midiOutput, midiChannel, deviceType) => {\n  if(deviceType === 'kemper') {\n    return KemperEffects(midiOutput, midiChannel);\n  } else if(deviceType === 'neural-henson') {\n    return ArchetypeEffects(midiOutput, midiChannel);\n  } else if(deviceType === 'neural-gojira') {\n    return ArchetypeEffects(midiOutput, midiChannel);\n  } else {\n    // TODO\n    return [];\n  }\n};\n\nconst attachEffectsToDevice = (device) => {\n  return {\n    ...device,\n    effects: getEffectsForDevice(device.output, device.midiChannel, device.type)\n  }\n};\n\nexport default attachEffectsToDevice;\n","import {\n  Button,\n  Col,\n  Container,\n  FloatingLabel,\n  Row,\n  Form\n} from 'react-bootstrap';\n\nimport { useState, useContext } from 'react';\n\nimport DeviceTypes from './DeviceTypes';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nimport attachEffectsToDevice from './effects/Effects';\n\nfunction DeviceAddForm() {\n\n  const initialState = {\n    alias: 'My Example Device',\n    type: '',\n    midiDevice:'',\n    midiChannel: ''\n  };\n\n  const [ formValues, setValues ] = useState(initialState);\n\n  const {\n    devices,\n    setDevices,\n    midiOutputs\n  } = useContext(MidiDeviceContext);\n\n  const addDevice = (device) => {\n    if (devices.some((d) => d.key === device.key)) {\n      // TODO - some validation error msg because it's already been added\n    } else {\n      setDevices([\n        ...devices,\n        attachEffectsToDevice(device)\n      ]);\n    }\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Form>\n          <Row>\n            <Form.Group className=\"mb-3\" controlId=\"formDeviceAlias\">\n              <Form.Label>Device Name</Form.Label>\n              <Form.Control\n                value={formValues.alias}\n                onChange={(e) => {\n                  setValues({\n                    ...formValues,\n                    alias: e.target.value\n                  });\n                }}\n                type=\"text\" />\n              <Form.Text className=\"text-muted\">\n                Enter a name for the MIDI device you want to control\n              </Form.Text>\n            </Form.Group>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col md>\n              <FloatingLabel controlId=\"formDeviceType\" label=\"Device Type\">\n                <Form.Select\n                  value={formValues.type}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      type: e.target.value\n                    });\n                  }}\n                  aria-label=\"Device Type\">\n                  <option value=\"\"></option>\n                  {\n                    Object.entries(DeviceTypes).map(([ deviceId, deviceName ]) => {\n                      return <option\n                        key={deviceId}\n                        value={deviceId}\n                        >\n                          {deviceName}\n                        </option>\n                        \n                    })\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formMidiDevice\" label=\"MIDI Device\">\n                <Form.Select\n                  value={formValues.midiDevice}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      midiDevice: e.target.value\n                    })\n                  }}\n                  aria-label=\"MIDI Device\">\n                <option value=\"\"></option>\n                  {\n                    midiOutputs.map((device) => (\n                      <option key={device.id} value={device.id}>{device.name} ({device.id})</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formChannel\" label=\"MIDI Channel\">\n                <Form.Select\n                  value={formValues.midiChannel}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      midiChannel: e.target.value\n                    });\n                  }}\n                  aria-label=\"MIDI Channel\">\n                  <option value=\"\"></option>\n                  {\n                    [...Array(16)].map((e, i) => (\n                      <option key={i} value={i+1}>{i+1}</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button\n                onClick={() => {\n                  addDevice({\n                    key: [formValues.midiDevice, '-', formValues.midiChannel].join(''),\n                    id: [formValues.midiDevice, '-', formValues.midiChannel].join(''),\n                    alias: formValues.alias,\n                    channel: formValues.midiChannel,\n                    type: formValues.type,                    \n                    output: midiOutputs.find((output) => output.id === formValues.midiDevice)\n                  });\n                }}\n                variant=\"primary\">\n                Add Device\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Row>\n    </Container>\n  );\n}\n\nexport default DeviceAddForm;\n","import {\n  Button,\n  Container,\n  Row,\n  Col,\n  Table\n} from 'react-bootstrap';\n\nimport { useContext } from 'react';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nfunction MidiEffectList() {\n  const { devices } = useContext(MidiDeviceContext);\n\n  const effects = devices.reduce((effects, device) => {\n    const deviceEffects = Object.entries(device.effects).map(([effect, trigger]) => ({\n      key: `${device.key}-${effect}`,\n      deviceAlias: device.alias,\n      name: effect,\n      trigger: trigger\n    }));\n\n    return [\n      ...effects,\n      ...deviceEffects\n    ];\n  },[]);\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Table striped bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th>Device</th>\n                <th>Effect</th>\n                <th>Test</th>\n              </tr>\n            </thead>\n            <tbody>\n            {\n              effects.map((effect) => {\n                  return <tr key={effect.key}>\n                    <td>{effect.deviceAlias}</td>\n                    <td>{effect.name}</td>\n                    <td>\n                      <Button onClick={() => {\n                        effect.trigger();\n                      }}>\n                        Trigger\n                      </Button>\n                    </td>\n                  </tr>\n                }\n              )\n            }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default MidiEffectList;\n","import {\n  useContext\n} from 'react';\nimport {\n  Container,\n  FloatingLabel,\n  Form,\n  ListGroup\n} from 'react-bootstrap';\n\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nfunction TwitchEventsLog() {\n    const {\n      events\n    } = useContext(TwitchEventsContext);\n\n    const formattedLogs = events.map(({ userDisplayName, rewardTitle, redemptionDate }) => {\n      return `[${redemptionDate}] Username: ${userDisplayName} | Channel Point Redemption: ${rewardTitle}`\n    }).join('\\n');\n    \n    return <Container>\n      <FloatingLabel controlId=\"logsTextArea\" label=\"Twitch Event Log\">\n        <Form.Control\n          as=\"textarea\"\n          readOnly\n          value={formattedLogs}\n          style={{ height: '400px' }}\n        />\n      </FloatingLabel>\n\n    </Container>\n}\n\nexport default TwitchEventsLog;\n","import {\n  useContext\n} from 'react';\n\nimport {\n  Container,\n  Row,\n  Col,\n  Table,\n  Button\n} from 'react-bootstrap';\n\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nconst formatConditionName = ({ type, name }) => {\n  switch (type) {\n    case 'channelPoint':\n      return `[Channel Points] ${name}`\n    default:\n      return 'Error'\n  }\n};\n\nfunction TriggersList() {\n    const {\n      eventListeners,\n      unregisterEventListener\n    } = useContext(TwitchEventsContext);\n\n    return (\n      <Container fluid>\n      <Row>\n        <Col>\n          <Table striped bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th>Twitch Event</th>\n                <th>Device</th>\n                <th>Effects</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n            {\n              eventListeners.map(({ id, condition, device, effects }) => {\n                  return <tr key={id}>\n                    <td>{formatConditionName(condition)}</td>\n                    <td>{device.alias}</td>\n                    <td>{effects.reduce((out, effect) => (out + ' ' + effect.name), '')}</td>\n                    <td>\n                      <Button variant=\"danger\" onClick={() => {\n                        unregisterEventListener(id);\n                      }}>\n                        Remove\n                      </Button>\n                    </td>\n                  </tr>\n                }\n              )\n            }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n    );\n}\n\nexport default TriggersList;\n","import {\n  Button,\n  Col,\n  Container,\n  FloatingLabel,\n  Row,\n  Form\n} from 'react-bootstrap';\n\nimport { useState, useContext } from 'react';\n\nimport { MidiDeviceContext } from './context/MidiDevices';\nimport { TwitchEventsContext } from './context/TwitchEvents';\nimport { compareScopes } from '@twurple/auth/lib/helpers';\n\nfunction TriggersAddForm() {\n  const initialState = {\n    device: {\n      effects: []\n    },\n    condition: {\n      type: '',\n      name: ''\n    },\n    effects: []\n  };\n\n  const [ { device, condition, effects }, setFormValues ] = useState(initialState);\n\n  const {\n    devices\n  } = useContext(MidiDeviceContext);\n\n  const {\n    registerEventListeners\n  } = useContext(TwitchEventsContext);\n\n  const addTrigger = (formValues) => {\n    const trigger = {\n      id: `${formValues.device.alias}-${formValues.condition.type}-${formValues.condition.name}`,\n      device: formValues.device,\n      condition: formValues.condition,\n      effects: [{\n        name: formValues.effects,\n        exec: formValues.device.effects[formValues.effects]\n      }]\n    };\n    \n    registerEventListeners([\n      trigger\n    ]);\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Form>\n          <Row className=\"mb-3\">\n          <Col md>\n              <FloatingLabel controlId=\"formTwitchEvent\" label=\"Twitch Event Type\">\n                <Form.Select\n                  value={condition.type}\n                  onChange={(e) => {\n                    setFormValues((formValues) => {\n                      return {\n                        ...formValues,\n                        condition: {\n                          name: formValues.condition.name,\n                          type: e.target.value\n                        }\n                      }\n                    });\n                  }}\n                  aria-label=\"Device Type\">\n                  <option value=\"\"></option>\n                  <option value=\"channelPoint\">Channel Points</option>\n                  <option value=\"bits\">Bits</option>\n                  <option value=\"subscriptions\">Subscriptions</option>\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"floatingInputGrid\" label=\"Twitch Event: Value\">\n                <Form.Control\n                  type=\"text\"\n                  value={condition.name}\n                  onChange={(e) => {\n                    setFormValues((formValues) => {\n                      return {\n                          ...formValues,\n                          condition: {\n                            type: formValues.condition.type,\n                            name: e.target.value\n                          }\n                        }\n                      });\n                    }\n                  }\n                  placeholder=\"Tone: Toggle Reverb\" />\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formDevice\" label=\"Device\">\n                <Form.Select\n                  value={device.id}\n                  onChange={(e) => {\n                    setFormValues((formValues) => {\n                      return {\n                        ...formValues,\n                        device: devices.find((d) => (d.id === e.target.value)) || { effects: [] }\n                      }\n                    })\n                  }}\n                  aria-label=\"Device\">\n                <option value=\"\"></option>\n                  {\n                    devices.map(({ alias, key, id }) => (\n                      <option key={key} value={id}>{alias}</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formEffects\" label=\"Effects\">\n                <Form.Select\n                  value={effects}\n                  onChange={(e) => {\n                    \n                    setFormValues((formValues) => {\n                      return {\n                        ...formValues,\n                        effects: e.target.value\n                      }\n                    });\n                  }}\n                  aria-label=\"MIDI Channel\">\n                  <option value=\"\"></option>\n                  {\n                    Object.keys(device.effects).map((name) => {\n                      return <option key={name} value={name}>{name}</option>\n                     })\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button\n                onClick={() => {\n                  addTrigger({\n                    device,\n                    condition,\n                    effects\n                  });\n                }}\n                variant=\"primary\">\n                Add Trigger\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Row>\n    </Container>\n  );\n}\n\nexport default TriggersAddForm;\n","import {\n  useContext,\n  useEffect,\n  useState\n} from 'react';\n\nimport { \n  Button,\n  Col,\n  Container,\n  Row\n} from 'react-bootstrap';\n\nimport { MidiDeviceContext } from './context/MidiDevices';\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nimport attachEffectsToDevice from './effects/Effects';\n\n\nconst saveConfigurationToStorage = (name, { triggers, devices }) => {\n  localStorage.setItem(`${name}-triggers`, JSON.stringify(triggers));\n  localStorage.setItem(`${name}-devices`, JSON.stringify(devices));\n};\n\nconst loadConfigurationFromStorage = (name) => {\n  const triggers = JSON.parse(localStorage.getItem(`${name}-triggers`));\n  const devices = JSON.parse(localStorage.getItem(`${name}-devices`));\n\n  if (triggers && devices) {\n    return {\n      triggers,\n      devices\n    }\n  } else {\n    return null;\n  }\n};\n\nfunction ConfigurationBackupForm() {\n    const {\n      eventListeners,\n      setEventListeners\n    } = useContext(TwitchEventsContext);\n\n    const {\n      devices,\n      setDevices,\n      midiOutputs\n    } = useContext(MidiDeviceContext)\n\n    const [ errors, setErrors ] = useState([]);\n\n    const serializeCurrentConfiguration = () => {\n      const serializedTriggers = eventListeners.map((eventListener) => {\n        return {\n          id: eventListener.id,\n          condition: eventListener.condition,\n          device: eventListener.device.id,\n          effects: eventListener.effects.map(e => e.name)\n        };\n      });\n\n      const serializedDevices = devices.map((device) => {         \n        return {\n          id: device.id,\n          alias: device.alias,\n          channel: device.channel,\n          type: device.type,\n          midiOutput: device.output.id\n        };\n      });\n\n      return {\n        triggers: serializedTriggers,\n        devices: serializedDevices\n      };\n    };\n  \n    const deserializeAndLoadConfiguration = ({ triggers = [], devices = [] }) => {\n      const deviceDeserializationResult = devices.reduce(({ devices, errors }, device) => {\n        const midiOutput = midiOutputs.find(output => output.id === device.midiOutput);\n        if(midiOutput) {\n\n          const deviceWithoutEffects = {\n            ...device,\n            key: device.id,\n            output: midiOutput\n          };\n\n          return {\n            devices: [\n              ...devices,\n              attachEffectsToDevice(deviceWithoutEffects)\n            ],\n            errors: errors\n          }\n        } else {\n          return { \n            devices: devices,\n            errors: [\n              ...errors,\n              new Error(`Error loading configuration for device ${device.alias} - ID ${device.midiOutput} not found`)\n            ]\n          }\n        }\n      }, {\n        devices: [],\n        errors: []\n      });\n\n      setErrors(deviceDeserializationResult.errors);\n      setDevices(deviceDeserializationResult.devices);\n      \n      const deserializedTriggers = triggers.reduce((triggers, trigger) => {\n        const device = deviceDeserializationResult.devices.find((d) => d.id === trigger.device);\n\n        if(device) {\n          const hydratedTrigger = {\n            ...trigger,\n            device: device,\n            effects: trigger.effects.map((name) => {\n              return {\n                name: name,\n                exec: device.effects[name]\n              }\n            })\n          }\n\n          return [\n            ...triggers,\n            hydratedTrigger\n          ]\n        } else {\n          return triggers;\n        }\n      }, []);\n\n      setEventListeners(deserializedTriggers);\n\n      return deviceDeserializationResult.errors;\n    };\n\n    const [ initialLoad, setInitialLoad ] = useState(true);\n\n    useEffect(() => {\n      if(initialLoad) {\n        const configuration = loadConfigurationFromStorage('current');\n        if (configuration) {\n          const errors = deserializeAndLoadConfiguration(configuration);\n          if (errors.length === 0) {\n            setInitialLoad(false);\n          }\n        } else {\n          setInitialLoad(false);\n        }\n      }\n    }, [ midiOutputs, initialLoad, setInitialLoad, deserializeAndLoadConfiguration ]);\n\n    return <Container>\n      <Row className=\"mb-2\">\n        <Col>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              const configuration = serializeCurrentConfiguration();\n              saveConfigurationToStorage('current', configuration);\n            }}\n            >\n          Save Current Configuration\n          </Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              const configuration = loadConfigurationFromStorage('current');\n              if (configuration) {\n                deserializeAndLoadConfiguration(configuration);\n              }\n            }}\n            >\n          Restore Last Saved Configuration\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n}\n\nexport default ConfigurationBackupForm;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport DeviceList from './DeviceList';\nimport DeviceAddForm from './DeviceAddForm';\nimport MidiEffectList from './MidiEffectList';\nimport TwitchEventsLog from './TwitchEventsLog';\nimport MidiDeviceProvider from './context/MidiDevices';\nimport TriggersList from './TriggersList';\nimport TriggersAddForm from './TriggersAddForm';\nimport ConfigurationBackupForm from './ConfigurationBackupForm';\n\nfunction Browser() {\n  return (\n    <MidiDeviceProvider>\n      <Tabs defaultActiveKey=\"browser\" id=\"browser\" className=\"mb-3\">\n        <Tab eventKey=\"triggers\" title=\"Triggers\">\n          <TriggersList />\n          <TriggersAddForm />\n        </Tab>\n        <Tab eventKey=\"previewEffects\" title=\"Preview Effects\">\n          <MidiEffectList />\n        </Tab>\n        <Tab eventKey=\"midiDevices\" title=\"Manage MIDI Devices\">\n          <DeviceList />\n          <DeviceAddForm />\n        </Tab>\n        <Tab eventKey=\"saveConfiguration\" title=\"Save/Load Configuration\">\n          <ConfigurationBackupForm />\n        </Tab>\n        <Tab eventKey=\"eventLog\" title=\"Twitch Event Log\">\n          <TwitchEventsLog />\n        </Tab>\n      </Tabs>\n    </MidiDeviceProvider>\n  );\n}\n\nexport default Browser;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Button,\n  Card,\n  Container,\n  Stack\n} from 'react-bootstrap';\nimport {\n  useContext\n} from 'react';\n\nimport { AuthContext } from './context/Auth';\n\nfunction LoginGate(props) {\n    const {\n      clientId,\n      token\n    } = useContext(AuthContext);\n    \n    const loggedIn = token !== '';\n    \n    const REDIRECT_URL = `${window.location.protocol}//${window.location.host}${window.location.pathname}authorize`\n\n    return loggedIn ? props.children : \n      <Card className=\"mt-3\">\n        <Card.Body>\n          <Stack direction=\"horizontal\" gap={2}>\n            <div>Connect your Twitch.TV account in order to get started:</div>\n            <Button onClick={() => {\n              window.location.href = `https://id.twitch.tv/oauth2/authorize?client_id=${clientId}&redirect_uri=${REDIRECT_URL}&response_type=token&scope=bits%3Aread%20channel%3Aread%3Aredemptions%20channel%3Aread%3Asubscriptions`;\n            }}>\n              Twitch.TV Login\n            </Button>\n            </Stack>\n        </Card.Body>\n      </Card>\n}\n\nexport default LoginGate;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction NotFound() {\n  return <h2>\n    Invalid URL - page not found\n  </h2>;\n}\n\nexport default NotFound;","import {\n  useContext\n} from 'react';\nimport {\n  CloudCheck,\n  CloudSlash\n} from 'react-bootstrap-icons';\n\nimport { Alert, Spinner } from 'react-bootstrap';\n\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nfunction LoginStatus() {\n    const {\n      connectionStatus\n    } = useContext(TwitchEventsContext);    \n\n    switch (connectionStatus) {\n      case 'connected':\n        return <Alert variant=\"success\" className=\"mb-0\"> <CloudCheck color=\"green\" /> Connected to Twitch</Alert>\n      case 'connecting':\n        return <Alert variant=\"primary\" className=\"mb-0\"> <Spinner size=\"sm\" animation=\"border\" /> Connecting...</Alert>\n      case 'disconnected':\n        return <Alert variant=\"danger\" className=\"mb-0\"><CloudSlash color=\"red\" /> Disconnected from Twitch!</Alert>\n      default:\n        return <Alert variant=\"warning\">Error checking connection status</Alert>\n    }\n}\n\nexport default LoginStatus;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AuthRedirect from './AuthRedirect';\nimport AuthProvider from './context/Auth';\nimport TwitchEventsProvider from './context/TwitchEvents';\nimport Browser from './Browser';\nimport LoginGate from './LoginGate';\nimport NotFound from './NotFound';\nimport {\n  Container,\n  Navbar,\n  Nav\n} from 'react-bootstrap';\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from 'react-router-dom';\nimport LoginStatus from './LoginStatus';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <TwitchEventsProvider>\n        <div className=\"App\"> \n          <Navbar variant=\"dark\" bg=\"dark\" expand=\"sm\" className=\"mb-3\">\n            <Container>\n              <Navbar.Brand>Chat Plays MIDI</Navbar.Brand>\n              <Nav className=\"me-auto\">\n                {/* <Nav.Link href=\"#setup\">Setup Guide</Nav.Link>\n                <Nav.Link href=\"#contact\">Contact</Nav.Link> */}\n              </Nav>\n              <Nav.Item>\n                <Container>\n                  <LoginStatus /> \n                </Container>\n              </Nav.Item>\n            </Container>\n          </Navbar>\n          \n          {/* ----- MAIN CONTENT ---- */}\n          <Container>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n              <Routes>\n                <Route path=\"/\" element={\n                  <Container>\n                    <LoginGate>\n                      <Browser>\n                      </Browser>\n                    </LoginGate>\n                  </Container>\n                } />\n              <Route path=\"/authorize\" element={\n                <AuthRedirect />\n              } />\n              <Route path=\"/*\" element={\n                <NotFound />\n              } />\n              </Routes>\n            </BrowserRouter>\n          </Container>\n        </div>\n      </TwitchEventsProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}