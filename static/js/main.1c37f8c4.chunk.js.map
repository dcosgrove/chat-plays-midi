{"version":3,"sources":["context/Auth.js","AuthRedirect.js","hooks/TwitchPubSubClient.js","context/TwitchEvents.js","DeviceTypes.js","hooks/MidiDevice.js","context/MidiDevices.js","DeviceList.js","effects/KemperEffects.js","effects/ArchetypeEffects.js","DeviceAddForm.js","MidiEffectList.js","TwitchEventsLog.js","TriggersList.js","Browser.js","LoginGate.js","NotFound.js","App.js","index.js"],"names":["TWITCH_APP_CLIENT_ID","AuthContext","createContext","token","clientId","updateToken","AuthProvider","children","useState","expiresAt","auth","setAuth","Provider","value","t","AuthRedirect","useContext","document","location","hash","split","replace","useEffect","Date","now","console","group","to","useTwitchPubSubClient","onChannelPointRedemption","client","setClient","log","authProvider","StaticAuthProvider","pubSubClient","SingleUserPubSubClient","onRedemption","message","id","userDisplayName","rewardTitle","redemptionDate","err","TwitchEventsContext","events","onNewEvent","cb","registerEventListeners","listenerFn","TwitchEventsProvider","setEvents","eventListeners","setEventListeners","length","forEach","condition","action","type","name","previous","DeviceTypes","useMidiDeviceList","devices","setDevices","webmidi","enable","error","outputs","MidiDeviceContext","midiOutputs","MidiDeviceProvider","DeviceList","Container","fluid","Row","Col","Table","striped","bordered","variant","map","device","alias","Button","onClick","filter","key","KemperEffects","channel","sendControlChange","Effects","ArchetypeEffects","reduce","effectFns","cc","DeviceAddForm","midiDevice","midiChannel","formValues","setValues","Form","Group","className","controlId","Label","Control","onChange","e","target","Text","md","FloatingLabel","label","Select","Object","entries","deviceId","deviceName","Array","i","midiOutput","deviceType","some","d","effects","output","addDevice","join","find","MidiEffectList","deviceEffects","effect","trigger","deviceAlias","TwitchEventsLog","ListGroup","Item","TriggersList","triggers","setTriggers","reverbListener","delayListener","overdriveListener","Browser","Tabs","defaultActiveKey","Tab","eventKey","title","LoginGate","props","loggedIn","URL_PATH","window","pathname","REDIRECT_URL","protocol","host","Card","Body","href","NotFound","App","Auth","TwitchEvents","basename","process","path","element","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1c37f8c4.chunk.js","sourcesContent":["import {\n  createContext, useState\n } from \"react\";\n\nconst TWITCH_APP_CLIENT_ID = 'xsdpos4tnftz6tirr730o0c3u5lfsj';\n\nexport const AuthContext = createContext({\n  token: '',\n  clientId: TWITCH_APP_CLIENT_ID,\n  updateToken: () => {}\n});\n\nexport const AuthProvider = ({ children }) => {\n    const [auth, setAuth] = useState({\n      token: '',\n      expiresAt: ''\n    });\n\n    return <AuthContext.Provider value={{ \n        token: auth.token,\n        clientId: TWITCH_APP_CLIENT_ID,\n        updateToken: (t, expiresAt) => {\n          setAuth({\n            token: t,\n            expiresAt: expiresAt\n          })\n        }\n      }}>\n      {children}\n    </AuthContext.Provider>\n}\n\nexport default AuthProvider;\n","import { useEffect, useContext } from 'react';\nimport { AuthContext } from './context/Auth';\nimport { Navigate } from 'react-router-dom';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction AuthRedirect() {\n  const {\n    updateToken\n  } = useContext(AuthContext);\n\n  const token = document.location.hash.split('&')[0].replace('#access_token=', '');\n\n  useEffect(() => {\n    // TODO - figure out expiration time\n    const expiresAt = Date.now();\n    console.group('updating with', token, expiresAt);\n    updateToken(token, expiresAt);\n    \n  });\n\n  return <div>\n      { token !== '' ? <Navigate replace to=\"/\" /> : `Authorizing...` }\n  </div>;\n}\n\nexport default AuthRedirect;\n","import {\n  useState,\n  useEffect\n} from 'react';\n\nimport { StaticAuthProvider } from '@twurple/auth';\nimport { SingleUserPubSubClient } from '@twurple/pubsub';\n\nfunction useTwitchPubSubClient(clientId, token, onChannelPointRedemption) {\n  const [ client,  setClient ] = useState(null);\n\n  useEffect(() => {\n    console.log('running effect in TwitchPubSubClient');\n    if(!client && token !== '') {\n      console.log('setting up pubsub client...');\n      const authProvider = new StaticAuthProvider(clientId, token);\n      console.log('auth provider', authProvider);\n      \n      const pubSubClient = new SingleUserPubSubClient({\n        authProvider: authProvider\n      });\n\n      pubSubClient.onRedemption((message) => {\n        // console.log('raw message', message);\n        const { id, userDisplayName, rewardTitle, redemptionDate } = message;\n        onChannelPointRedemption({ id, userDisplayName, rewardTitle, redemptionDate });\n      }, (err) => {\n        console.log('listening error', err);\n      });\n\n      setClient(pubSubClient);\n\n    }\n\n    return () => {\n      console.log('pubsub effect teardown');\n    }\n  }, [client, clientId, onChannelPointRedemption, token]);\n\n  return client;\n}\n\nexport default useTwitchPubSubClient;\n","import {\n  createContext,\n  useContext,\n  useEffect,\n  useState\n } from \"react\";\nimport useTwitchPubSubClient from \"../hooks/TwitchPubSubClient\";\nimport { AuthContext } from \"./Auth\";\n\nexport const TwitchEventsContext = createContext({\n  events: [],\n  onNewEvent: (cb) => { cb() },\n  registerEventListeners: (listenerFn) => {}\n});\n\nexport const TwitchEventsProvider = ({ children }) => {\n  const [ events, setEvents ] = useState([]);\n\n  const {\n    clientId,\n    token\n  } = useContext(AuthContext);\n\n  const onChannelPointRedemption = ({ userDisplayName, rewardTitle, redemptionDate }) => {\n    setEvents((events) => {\n      return [\n        ...events,\n        { userDisplayName, rewardTitle, redemptionDate }\n      ]\n    });\n    }\n\n  const [ eventListeners, setEventListeners ] = useState([]);\n  \n  // run triggers for latest event\n  useEffect(() => {\n    if (events.length > 0) {\n        const { rewardTitle } = events[events.length-1];\n        eventListeners.forEach(({ condition, action }) => {\n        if(condition.type === 'channelPoint' && condition.name === rewardTitle) {\n          console.log(`[Channel Point Redemption] Firing action for ${rewardTitle}`)\n          action();\n        }\n      });\n    }    \n  }, [ events ])\n\n  useTwitchPubSubClient(clientId, token, onChannelPointRedemption);\n\n  return <TwitchEventsContext.Provider value={{ \n      events,\n      registerEventListeners: (eventListeners) => {\n        console.log('registering event listeners...', eventListeners);\n        setEventListeners((previous) => {\n          console.log('setting event listener...');\n          return [\n            ...previous,\n            ...eventListeners\n          ];\n        });\n      }\n  }}>\n    {children}\n  </TwitchEventsContext.Provider>\n}\n\nexport default TwitchEventsProvider;\n","const DeviceTypes = {\n  'kemper': 'Kemper Profiler',\n  'neural-henson': 'Neural DSP Archetype: Tim Henson',\n  'neural-gojira': 'Neural DSP Archetype: Gojira'\n}\n\nexport default DeviceTypes;\n","import { useState, useEffect } from 'react';\nimport webmidi from 'webmidi';\n\nfunction useMidiDeviceList() {\n  const [devices, setDevices] = useState([]);\n\n  useEffect(() => {\n    webmidi.enable((err) => {\n      if(err) {\n        console.error('Unable to enable WebMIDI', err);\n        setDevices([]);\n      } else {      \n        setDevices(webmidi.outputs);\n      }\n    });\n  }, []);\n\n  return devices;\n}\n\nexport default useMidiDeviceList;\n","import {\n  createContext, useState\n } from \"react\";\n\nimport useMidiDeviceList from \"../hooks/MidiDevice\";\n\nexport const MidiDeviceContext = createContext({\n  devices: [],\n  setDevices: () => {},\n  midiOutputs: []\n});\n\nexport const MidiDeviceProvider = ({ children }) => {\n    const midiOutputs = useMidiDeviceList();\n    const [ devices, setDevices ] = useState([]);\n\n    return <MidiDeviceContext.Provider value={{ \n        devices,\n        setDevices,\n        midiOutputs\n      }}>\n      {children}\n    </MidiDeviceContext.Provider>\n}\n\nexport default MidiDeviceProvider;\n","import {\n  Button,\n  Container,\n  Row,\n  Col,\n  Table\n} from 'react-bootstrap';\n\nimport { useContext } from 'react';\nimport DeviceTypes from './DeviceTypes';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nfunction DeviceList() {\n\n  const {\n    devices,\n    setDevices\n  } = useContext(MidiDeviceContext);\n\n  const removeDevice = (id) => {\n    setDevices(devices.filter(device => device.id !== id));\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Table striped bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th>Alias</th>\n                <th>ID</th>\n                <th>Type</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n            {\n              devices.map((device) => {\n                  return <tr key={device.key}>\n                    <td>{device.alias}</td>\n                    <td>{device.id}</td>\n                    <td>{DeviceTypes[device.type]}</td>\n                    <td>\n                      <Button variant=\"danger\" onClick={() => {\n                        removeDevice(device.id);\n                      }}>\n                        Remove\n                      </Button>\n                    </td>\n                  </tr>\n                }\n              )\n            }\n            </tbody>\n          </Table>\n          { devices.length === 0 ? <h2>Add a new MIDI device to get started!</h2> : null }\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default DeviceList;","// Kemper control codes doc: https://www.manualslib.com/manual/1786994/Kemper-Profiler.html?page=208#manual\n\nconst KemperEffects = (device, channel) => {\n  return {\n    'Delay On': () => {\n      device.sendControlChange(27, 1, channel);\n    },\n    'Delay Off': () => {\n      device.sendControlChange(27, 0, channel);\n    }\n  }\n}\n\nexport default KemperEffects;\n","// Effect name to midi CC tuples\nconst Effects = [\n  [ 'Toggle Overdrive', 2 ],\n  [ 'Toggle Distortion', 3 ],\n  [ 'Toggle Phaser', 4 ],\n  [ 'Toggle Chorus', 5 ],\n  // 6 IS CURSED\n  [ 'Toggle Reverb', 7 ],\n  [ 'Toggle Delay', 8 ],\n]\n\nconst ArchetypeEffects = (device, channel) => {\n  return Effects.reduce((effectFns, [ name, cc ]) => {\n      effectFns[name] = () => {\n        console.log('sending cc', cc);\n        device.sendControlChange(cc, 1, channel);\n      };\n\n      return effectFns;\n  }, {});\n}  \n\nexport default ArchetypeEffects;\n","import {\n  Button,\n  Col,\n  Container,\n  FloatingLabel,\n  Row,\n  Form\n} from 'react-bootstrap';\n\nimport { useState, useContext } from 'react';\n\nimport DeviceTypes from './DeviceTypes';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nimport KemperEffects from './effects/KemperEffects';\nimport ArchetypeEffects from './effects/ArchetypeEffects';\n\n// attach a list of effects to a device based on its type\nconst getEffectsForDevice = (midiOutput, midiChannel, deviceType) => {\n  if(deviceType === 'kemper') {\n    return KemperEffects(midiOutput, midiChannel);\n  } else if(deviceType === 'neural-henson') {\n    return ArchetypeEffects(midiOutput, midiChannel);\n  } else if(deviceType === 'neural-gojira') {\n    return ArchetypeEffects(midiOutput, midiChannel);\n  } else {\n    // TODO\n    return [];\n  }\n};\n\nfunction DeviceAddForm() {\n\n  const initialState = {\n    alias: 'My Example Device',\n    type: '',\n    midiDevice:'',\n    midiChannel: ''\n  };\n\n  const [ formValues, setValues ] = useState(initialState);\n\n  const {\n    devices,\n    setDevices,\n    midiOutputs\n  } = useContext(MidiDeviceContext);\n\n  const addDevice = (device) => {\n    if (devices.some((d) => d.key === device.key)) {\n      // TODO - some validation error msg because it's already been added\n    } else {\n      setDevices([\n        ...devices,\n        {\n          ...device,\n          effects: getEffectsForDevice(device.output, device.midiChannel, device.type)\n        }\n      ]);\n    }\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Form>\n          <Row>\n            <Form.Group className=\"mb-3\" controlId=\"formDeviceAlias\">\n              <Form.Label>Device Name</Form.Label>\n              <Form.Control\n                value={formValues.alias}\n                onChange={(e) => {\n                  setValues({\n                    ...formValues,\n                    alias: e.target.value\n                  });\n                }}\n                type=\"text\" />\n              <Form.Text className=\"text-muted\">\n                Enter a name for the MIDI device you want to control\n              </Form.Text>\n            </Form.Group>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col md>\n              <FloatingLabel controlId=\"formDeviceType\" label=\"Device Type\">\n                <Form.Select\n                  value={formValues.type}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      type: e.target.value\n                    });\n                  }}\n                  aria-label=\"Device Type\">\n                  <option value=\"\"></option>\n                  {\n                    Object.entries(DeviceTypes).map(([ deviceId, deviceName ]) => {\n                      return <option\n                        key={deviceId}\n                        value={deviceId}\n                        >\n                          {deviceName}\n                        </option>\n                        \n                    })\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formMidiDevice\" label=\"MIDI Device\">\n                <Form.Select\n                  value={formValues.midiDevice}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      midiDevice: e.target.value\n                    })\n                  }}\n                  aria-label=\"MIDI Device\">\n                <option value=\"\"></option>\n                  {\n                    midiOutputs.map((device) => (\n                      <option key={device.id} value={device.id}>{device.name} ({device.id})</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n            <Col md>\n              <FloatingLabel controlId=\"formChannel\" label=\"MIDI Channel\">\n                <Form.Select\n                  value={formValues.midiChannel}\n                  onChange={(e) => {\n                    setValues({\n                      ...formValues,\n                      midiChannel: e.target.value\n                    });\n                  }}\n                  aria-label=\"MIDI Channel\">\n                  <option value=\"\"></option>\n                  {\n                    [...Array(16)].map((e, i) => (\n                      <option key={i} value={i+1}>{i+1}</option>\n                    ))\n                  }\n                </Form.Select>\n              </FloatingLabel>\n            </Col>\n          </Row>\n          <Row> \n              <Button\n                onClick={() => {\n                  addDevice({\n                    key: [formValues.midiDevice, '-', formValues.midiChannel].join(''),\n                    id: [formValues.midiDevice, '-', formValues.midiChannel].join(''),\n                    alias: formValues.alias,\n                    channel: formValues.midiChannel,\n                    type: formValues.type,                    \n                    output: midiOutputs.find((output) => output.id === formValues.midiDevice)\n                  });\n                }}\n                variant=\"primary\">\n                Add Device\n              </Button>\n          </Row>\n        </Form>\n      </Row>\n    </Container>\n  );\n}\n\nexport default DeviceAddForm;\n","import {\n  Button,\n  Container,\n  Row,\n  Col,\n  Table\n} from 'react-bootstrap';\n\nimport { useContext } from 'react';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nfunction MidiEffectList() {\n  const { devices } = useContext(MidiDeviceContext);\n\n  const effects = devices.reduce((effects, device) => {\n    const deviceEffects = Object.entries(device.effects).map(([effect, trigger]) => ({\n      key: `${device.key}-${effect}`,\n      deviceAlias: device.alias,\n      name: effect,\n      trigger: trigger\n    }));\n\n    return [\n      ...effects,\n      ...deviceEffects\n    ];\n  },[]);\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <Table striped bordered variant=\"light\">\n            <thead>\n              <tr>\n                <th>Device</th>\n                <th>Effect</th>\n                <th>Test</th>\n              </tr>\n            </thead>\n            <tbody>\n            {\n              effects.map((effect) => {\n                  return <tr key={effect.key}>\n                    <td>{effect.deviceAlias}</td>\n                    <td>{effect.name}</td>\n                    <td>\n                      <Button onClick={() => {\n                        effect.trigger();\n                      }}>\n                        Trigger\n                      </Button>\n                    </td>\n                  </tr>\n                }\n              )\n            }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default MidiEffectList;\n","import {\n  useContext\n} from 'react';\nimport {\n  Container,\n  ListGroup\n} from 'react-bootstrap';\n\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nfunction TwitchEventsLog() {\n    const {\n      events,\n      onNewEvent\n    } = useContext(TwitchEventsContext);\n\n    return <Container>\n      <h2>Most Recent Events</h2>\n      <ListGroup>\n        {\n          events.map(({ userDisplayName, rewardTitle, redemptionDate }) => {\n            return <ListGroup.Item key={`${userDisplayName}-${redemptionDate}`}>\n              {`Username: ${userDisplayName} | Reward: ${rewardTitle} | Date: ${redemptionDate}`}\n            </ListGroup.Item>\n          })\n        }\n      </ListGroup>\n    </Container>\n}\n\nexport default TwitchEventsLog;\n","import {\n  useContext,\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  Container,\n  ListGroup\n} from 'react-bootstrap';\nimport { MidiDeviceContext } from './context/MidiDevices';\n\nimport { TwitchEventsContext } from './context/TwitchEvents';\n\nfunction TriggersList() {\n    const {\n      registerEventListeners\n    } = useContext(TwitchEventsContext);\n\n    const {\n      devices\n    } = useContext(MidiDeviceContext);\n\n    const [ triggers, setTriggers ] = useState([]);\n\n    useEffect(() => {\n      if (devices.length > 0) {\n        const device = devices[0];\n        const reverbListener = {\n          id: 1,\n          device: device.alias,\n          condition: {\n            type: 'channelPoint',\n            name: 'Tone: Toggle Reverb'\n          },\n          action: device.effects['Toggle Reverb']\n          // action: () => {...}\n        };\n\n        const delayListener = {\n          id: 2,\n          device: device.alias,\n          condition: {\n            type: 'channelPoint',\n            name: 'Tone: Toggle Delay'\n          },\n          action: device.effects['Toggle Delay']\n        };\n\n        const overdriveListener = {\n          id: 3,\n          device: device.alias,\n          condition: {\n            type: 'channelPoint',\n            name: 'Tone: Toggle OD'\n          },\n          action: device.effects['Toggle Overdrive']\n        };\n\n        registerEventListeners([\n          reverbListener,\n          delayListener,\n          overdriveListener\n        ]);\n\n        setTriggers([\n          ...triggers,\n          ...[ reverbListener, delayListener, overdriveListener ]\n        ]);\n      }\n    }, [devices]);\n\n\n    return <Container>\n      <ListGroup>\n        {\n          triggers.map((trigger) => {\n            const { id, condition, device } = trigger;\n            return <ListGroup.Item key={id}>\n              {`ID: ${id} | Twitch Event: ${condition.name} | Device: ${device} }`}\n            </ListGroup.Item>\n          })\n        }\n      </ListGroup>\n    </Container>\n}\n\nexport default TriggersList;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport DeviceList from './DeviceList';\nimport DeviceAddForm from './DeviceAddForm';\nimport MidiEffectList from './MidiEffectList';\nimport TwitchEventsLog from './TwitchEventsLog';\nimport MidiDeviceProvider from './context/MidiDevices';\nimport TriggersList from './TriggersList';\n\nfunction Browser() {\n  return (\n    <MidiDeviceProvider>\n      <Tabs defaultActiveKey=\"browser\" id=\"browser\" className=\"mb-3\">\n        <Tab eventKey=\"triggers\" title=\"Triggers\">\n          <TriggersList />\n        </Tab>\n        <Tab eventKey=\"previewEffects\" title=\"Preview Effects\">\n          <MidiEffectList></MidiEffectList>\n        </Tab>\n        <Tab eventKey=\"midiDevices\" title=\"Manage MIDI Devices\">\n          <DeviceList></DeviceList>\n          <DeviceAddForm></DeviceAddForm>\n        </Tab>\n      </Tabs>\n      <hr />\n      <TwitchEventsLog />\n    </MidiDeviceProvider>\n  );\n}\n\nexport default Browser;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card } from 'react-bootstrap';\nimport {\n  useContext\n} from 'react';\n\nimport { AuthContext } from './context/Auth';\n\nfunction LoginGate(props) {\n    const {\n      clientId,\n      token\n    } = useContext(AuthContext);\n    \n    const loggedIn = token !== '';\n    \n    const URL_PATH = window.location.pathname === '/' ? '/' : window.location.pathname + '/';\n\n    console.log('PATH BE', URL_PATH, window.location);\n    const REDIRECT_URL = `${window.location.protocol}//${window.location.host}${URL_PATH}authorize`\n\n    return loggedIn ? props.children : \n      <Card>\n        <Card.Body>\n          Login to Twitch to get started!\n          <Button onClick={() => {\n            window.location.href = `https://id.twitch.tv/oauth2/authorize?client_id=${clientId}&redirect_uri=${REDIRECT_URL}&response_type=token&scope=bits%3Aread%20channel%3Aread%3Aredemptions%20channel%3Aread%3Asubscriptions`;\n          }}>\n            Login\n          </Button>\n        </Card.Body>\n      </Card>\n}\n\nexport default LoginGate;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction NotFound() {\n  return <h2>\n    Invalid URL - page not found\n  </h2>;\n}\n\nexport default NotFound;","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AuthRedirect from './AuthRedirect';\nimport AuthProvider from './context/Auth';\nimport TwitchEventsProvider from './context/TwitchEvents';\nimport Browser from './Browser';\nimport LoginGate from './LoginGate';\nimport NotFound from './NotFound';\nimport { Container } from 'react-bootstrap';\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from 'react-router-dom';\n\nfunction App() {\n  \n  return (\n    <AuthProvider>\n      <TwitchEventsProvider>\n        <div className=\"App\"> \n          <header className=\"App-header\">\n            <p>\n              Twitch - MIDI Adapter\n            </p>\n          </header>\n          <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Routes>\n              <Route path=\"/\" element={\n                <Container>\n                  <LoginGate>\n                    <Browser>\n                    </Browser>\n                  </LoginGate>\n                </Container>\n              } />\n            <Route path=\"/authorize\" element={\n              <AuthRedirect />\n            } />\n            <Route path=\"/*\" element={\n              <NotFound />\n            } />\n            </Routes>\n          </BrowserRouter>\n        </div>\n      </TwitchEventsProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}